/* @author aross
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.hddmainwindow;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.sql.ResultSet;
import java.time.LocalDateTime;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.*;

//for jtabbedpanel
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;

import org.jdesktop.swingx.JXDatePicker;

public class HDDMainWindow extends javax.swing.JFrame {
    
/*
*this block is for comms variables for the passing of user name and password 
*as well as communicating with the server
*/

public String user = "ESDTester";
public String pass = "ESDTester";
public String rptPath;
public String server = "";
public String tableUsed = "Users";
public Connection conn;
public String Myurl = "jdbc:sqlserver://;servername=10.105.10.138\\SQLEXPRESSHDDDB;DatabaseName=HDD_Records;user=ESDTester;password=ESDTester";
public Statement stmt = null;
public ResultSet rs = null;

private String classUser = "";
private String classPass = "";
private byte userAccess[] = new byte[9];
private LocalDateTime myTimeStamp;
    /**
     * Creates new form HDDMainWindow
     */
    public HDDMainWindow() {
        initComponents();
        OpenUserChangeWindow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LogInDialog = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        LoginOKBtn = new javax.swing.JButton();
        LoginCancelBtn = new javax.swing.JButton();
        LoginUserTxt = new javax.swing.JTextField();
        LoginPswrdTxt = new javax.swing.JPasswordField();
        CreateOrderDialog = new javax.swing.JDialog();
        CreateOrderNotExistLbl = new javax.swing.JLabel();
        CreateOrdNumLbl = new javax.swing.JLabel();
        CreateOrdNumTxt = new javax.swing.JTextField();
        CreateVendorNumLbl = new javax.swing.JLabel();
        CreateVendCmbBx = new javax.swing.JComboBox<>();
        CreateShipLocLbl = new javax.swing.JLabel();
        CreateShipLocCmbBx = new javax.swing.JComboBox<>();
        CreateRdateLbl = new javax.swing.JLabel();
        CreateRdatePc = new org.jdesktop.swingx.JXDatePicker();
        CreateNewBtn = new javax.swing.JButton();
        CreateCancel = new javax.swing.JButton();
        ToolBar = new javax.swing.JToolBar();
        UserLbl = new javax.swing.JLabel();
        TabPanel = new javax.swing.JTabbedPane();
        ReceiveTb = new javax.swing.JPanel();
        RcvTabTitleLbl = new javax.swing.JLabel();
        RcvOrdrLbl = new javax.swing.JLabel();
        RcvOrdrTxt = new javax.swing.JTextField();
        RcvOrdrBtn = new javax.swing.JButton();
        RcvVendorLbl = new javax.swing.JLabel();
        RcvVendorTxt = new javax.swing.JTextField();
        RcvRdateLbl = new javax.swing.JLabel();
        RcvRdatePc = new org.jdesktop.swingx.JXDatePicker();
        RcvRdateBtn = new javax.swing.JButton();
        RcvFcostLbl = new javax.swing.JLabel();
        RcvFcostTxt = new javax.swing.JTextField();
        RcvFcostBtn = new javax.swing.JButton();
        RcvFPdateLBL = new javax.swing.JLabel();
        RcvFPdatePc = new org.jdesktop.swingx.JXDatePicker();
        RcvFPdateBtn = new javax.swing.JButton();
        RcvLocLbl = new javax.swing.JLabel();
        RcvSdateLbl = new javax.swing.JLabel();
        RcvDnumLbl = new javax.swing.JLabel();
        RcvSnotesLbl = new javax.swing.JLabel();
        RcvSnotesScroll = new javax.swing.JScrollPane();
        RcvSnotesTxtA = new javax.swing.JTextArea();
        RcvSnotesBtn = new javax.swing.JButton();
        RcvGrossLbl = new javax.swing.JLabel();
        RcvGrossTxt = new javax.swing.JTextField();
        RcvGrossBtn = new javax.swing.JButton();
        RcvAdateLbl = new javax.swing.JLabel();
        RcvAdatePc = new org.jdesktop.swingx.JXDatePicker();
        RcvDnumTxt = new javax.swing.JTextField();
        RcvLocBtn = new javax.swing.JButton();
        RcvSdateBtn = new javax.swing.JButton();
        RcvDnumBtn = new javax.swing.JButton();
        RcvAdateBtn = new javax.swing.JButton();
        RcvSdatePc = new org.jdesktop.swingx.JXDatePicker();
        RcvLocCmbBx = new javax.swing.JComboBox<>();
        HeatAssignment = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        HeatOrderScroll = new javax.swing.JScrollPane();
        HeatOrdersTbl = new javax.swing.JTable();
        HeatSortTxt = new javax.swing.JTextField();
        HeatProdTxt = new javax.swing.JTextField();
        HeatSortBtn = new javax.swing.JButton();
        HeatProdBtn = new javax.swing.JButton();
        HeatOrdLbl = new javax.swing.JLabel();
        ProductionManager = new javax.swing.JPanel();
        PMTabLbl = new javax.swing.JLabel();
        PMOrderLbl = new javax.swing.JLabel();
        PMOrderTxt = new javax.swing.JTextField();
        PMOrderBtn = new javax.swing.JButton();
        PMVendorLbl = new javax.swing.JLabel();
        PMVendorTxt = new javax.swing.JTextField();
        PMRdateLbl = new javax.swing.JLabel();
        PMRdatePc = new org.jdesktop.swingx.JXDatePicker();
        PMGrossLbl = new javax.swing.JLabel();
        PMSnotesLbl = new javax.swing.JLabel();
        PMGrossTxt = new javax.swing.JTextField();
        PMSheatBtn = new javax.swing.JButton();
        PMSCompBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        PMSnotesTxtA = new javax.swing.JTextArea();
        PMSheatLbl = new javax.swing.JLabel();
        PMBScanTxt = new javax.swing.JTextField();
        PMSCompLbl = new javax.swing.JLabel();
        PMSCompPc = new org.jdesktop.swingx.JXDatePicker();
        PMBScanLbl = new javax.swing.JLabel();
        PMBScanBtn = new javax.swing.JButton();
        PMSheatTxt = new javax.swing.JTextField();
        PMScanCompLbl = new javax.swing.JLabel();
        PMScanCompPc = new org.jdesktop.swingx.JXDatePicker();
        PMScanCompBtn = new javax.swing.JButton();
        PMPheatLbl = new javax.swing.JLabel();
        PMPheatTxt = new javax.swing.JTextField();
        PMPheatBtn = new javax.swing.JButton();
        PMDmanLbl = new javax.swing.JLabel();
        PMDmanPc = new org.jdesktop.swingx.JXDatePicker();
        PMDmanBtn = new javax.swing.JButton();
        PMSentLbl = new javax.swing.JLabel();
        PMSentTxt = new javax.swing.JTextField();
        PMSentBtn = new javax.swing.JButton();
        PMSentDtLbl = new javax.swing.JLabel();
        PMSentDtBtn = new javax.swing.JButton();
        PMSentDtPc = new org.jdesktop.swingx.JXDatePicker();
        PMHDRecieveLbl = new javax.swing.JLabel();
        PMHDScanLbl = new javax.swing.JLabel();
        PMHDRecieveTxt = new javax.swing.JTextField();
        PMHDScanTxt = new javax.swing.JTextField();
        PMOnotesLbl = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        PMOnotesTxtA = new javax.swing.JTextArea();
        PMOnotesBtn = new javax.swing.JButton();
        PMBSAddBtn = new javax.swing.JButton();
        PMBSAlterTxt = new javax.swing.JTextField();
        PMBSSubBtn = new javax.swing.JButton();
        PMSentAlterTxt = new javax.swing.JTextField();
        PMSentAddBtn = new javax.swing.JButton();
        PMSentSubBtn = new javax.swing.JButton();
        HDDManager = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        HDDManOrderLbl = new javax.swing.JLabel();
        HDDManOrderTxt = new javax.swing.JTextField();
        HDDManOrderBtn = new javax.swing.JButton();
        HDDManVendLbl = new javax.swing.JLabel();
        HDDManVendTxt = new javax.swing.JTextField();
        HDDManBSCLbl = new javax.swing.JLabel();
        HDDManBSCTxt = new javax.swing.JTextField();
        HDDManBSCompLbl = new javax.swing.JLabel();
        HDDManBSCompPc = new org.jdesktop.swingx.JXDatePicker();
        HDDManSerialCLbl = new javax.swing.JLabel();
        HDDManSerialCTxt = new javax.swing.JTextField();
        HDDManSerialCompLbl = new javax.swing.JLabel();
        HDDManSerialCompPc = new org.jdesktop.swingx.JXDatePicker();
        HDDManSerialCompBtn = new javax.swing.JButton();
        HDDManDmanCLbl = new javax.swing.JLabel();
        HDDManDmanCPc = new org.jdesktop.swingx.JXDatePicker();
        HDDManSentCLbl = new javax.swing.JLabel();
        HDDManSentCTxt = new javax.swing.JTextField();
        HDDManCompDLbl = new javax.swing.JLabel();
        HDDManCompDPc = new org.jdesktop.swingx.JXDatePicker();
        HDDManRecieveLbl = new javax.swing.JLabel();
        HDDManRecieveTxt = new javax.swing.JTextField();
        HDDManRecieveUDBtn = new javax.swing.JButton();
        HDDManRAlterTxt = new javax.swing.JTextField();
        HDDManRAddBtn = new javax.swing.JButton();
        HDDManRSubBtn = new javax.swing.JButton();
        HDDManRecieveCompLbl = new javax.swing.JLabel();
        HDDManRecieveCompPc = new org.jdesktop.swingx.JXDatePicker();
        HDDManRecieveCompBtn = new javax.swing.JButton();
        HDDManTblPnl = new javax.swing.JScrollPane();
        HDDManSizeTbl = new javax.swing.JTable();
        HDDManLanesPnl = new javax.swing.JPanel();
        jLabel53 = new javax.swing.JLabel();
        jButton20 = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        jTextField30 = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        HDDManSOFLbl = new javax.swing.JLabel();
        HDDManSOFTxt = new javax.swing.JTextField();
        HDDManSOPLbl = new javax.swing.JLabel();
        HDDManSOPTxt = new javax.swing.JTextField();
        HDDManSODLbl = new javax.swing.JLabel();
        HDDManSODTxt = new javax.swing.JTextField();
        HDDManRdateLbl = new javax.swing.JLabel();
        HDDManRdatePc = new org.jdesktop.swingx.JXDatePicker();
        HDDManOnotesLbl = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        HDDManOnotesTxtA = new javax.swing.JTextArea();
        HDDManOnotesBtn = new javax.swing.JButton();
        RecordView = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        jTextField34 = new javax.swing.JTextField();
        jButton24 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        AdminTb = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        WipeReports = new javax.swing.JPanel();
        WipeReportsLbl = new javax.swing.JLabel();
        ResaleTb = new javax.swing.JPanel();
        ResaleLbl = new javax.swing.JLabel();
        OpsDashTb = new javax.swing.JPanel();
        DashboardLbl = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jTextField36 = new javax.swing.JTextField();
        jTextField37 = new javax.swing.JTextField();
        jTextField38 = new javax.swing.JTextField();
        jTextField39 = new javax.swing.JTextField();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jXDatePicker8 = new org.jdesktop.swingx.JXDatePicker();
        jXDatePicker14 = new org.jdesktop.swingx.JXDatePicker();
        jLabel26 = new javax.swing.JLabel();
        jTextField35 = new javax.swing.JTextField();
        jButton25 = new javax.swing.JButton();
        jButton26 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        About = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        DashboardLbl1 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        LogInOutBtn = new javax.swing.JButton();
        ExitBtn = new javax.swing.JButton();

        LogInDialog.setTitle("Log In Credentials");
        LogInDialog.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        LogInDialog.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        LogInDialog.setLocation(new java.awt.Point(200, 200));
        LogInDialog.setMinimumSize(new java.awt.Dimension(409, 185));
        LogInDialog.setModal(true);
        LogInDialog.setName("Credentials"); // NOI18N
        LogInDialog.setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));
        jPanel1.setMaximumSize(new java.awt.Dimension(406, 155));
        jPanel1.setMinimumSize(new java.awt.Dimension(406, 155));
        jPanel1.setPreferredSize(new java.awt.Dimension(406, 155));

        jLabel21.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(200, 0, 0));
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("User Login");

        jLabel22.setBackground(new java.awt.Color(0, 102, 102));
        jLabel22.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(214, 217, 223));
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel22.setText("User Name: ");

        jLabel23.setBackground(new java.awt.Color(0, 102, 102));
        jLabel23.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(214, 217, 223));
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel23.setText("Password: ");

        LoginOKBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        LoginOKBtn.setText("Login");
        LoginOKBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginOKBtnActionPerformed(evt);
            }
        });

        LoginCancelBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        LoginCancelBtn.setText("Cancel");
        LoginCancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginCancelBtnActionPerformed(evt);
            }
        });

        LoginUserTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginUserTxtActionPerformed(evt);
            }
        });

        LoginPswrdTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginPswrdTxtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(LoginPswrdTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                            .addComponent(LoginUserTxt)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(LoginOKBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(LoginCancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(LoginUserTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(LoginPswrdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LoginOKBtn)
                    .addComponent(LoginCancelBtn))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout LogInDialogLayout = new javax.swing.GroupLayout(LogInDialog.getContentPane());
        LogInDialog.getContentPane().setLayout(LogInDialogLayout);
        LogInDialogLayout.setHorizontalGroup(
            LogInDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
        );
        LogInDialogLayout.setVerticalGroup(
            LogInDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        CreateOrderDialog.setBackground(new java.awt.Color(0, 102, 102));
        CreateOrderDialog.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        CreateOrderDialog.setLocation(new java.awt.Point(200, 200));
        CreateOrderDialog.setMinimumSize(new java.awt.Dimension(420, 255));
        CreateOrderDialog.setName("CrtOrdrDialog"); // NOI18N

        CreateOrderNotExistLbl.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        CreateOrderNotExistLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CreateOrderNotExistLbl.setText("Order Does Not Exist");

        CreateOrdNumLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        CreateOrdNumLbl.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        CreateOrdNumLbl.setText("Order Number:");

        CreateOrdNumTxt.setEditable(false);
        CreateOrdNumTxt.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        CreateOrdNumTxt.setFocusable(false);
        CreateOrdNumTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateOrdNumTxtActionPerformed(evt);
            }
        });

        CreateVendorNumLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        CreateVendorNumLbl.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        CreateVendorNumLbl.setText("Vendor Number:");

        CreateVendCmbBx.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        CreateVendCmbBx.setMaximumRowCount(1000);
        CreateVendCmbBx.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                CreateVendCmbBxFocusLost(evt);
            }
        });
        CreateVendCmbBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateVendCmbBxActionPerformed(evt);
            }
        });

        CreateShipLocLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        CreateShipLocLbl.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        CreateShipLocLbl.setText("Ship From Location:");

        CreateShipLocCmbBx.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        CreateShipLocCmbBx.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        CreateRdateLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        CreateRdateLbl.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        CreateRdateLbl.setText("Request Date:");

        CreateRdatePc.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        CreateNewBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        CreateNewBtn.setText("Create New Order");
        CreateNewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateNewBtnActionPerformed(evt);
            }
        });

        CreateCancel.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        CreateCancel.setText("Cancel");
        CreateCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CreateOrderDialogLayout = new javax.swing.GroupLayout(CreateOrderDialog.getContentPane());
        CreateOrderDialog.getContentPane().setLayout(CreateOrderDialogLayout);
        CreateOrderDialogLayout.setHorizontalGroup(
            CreateOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CreateOrderDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CreateOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CreateOrderNotExistLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CreateOrderDialogLayout.createSequentialGroup()
                        .addGroup(CreateOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(CreateNewBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                            .addGroup(CreateOrderDialogLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(CreateOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(CreateShipLocLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(CreateRdateLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(CreateVendorNumLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(CreateOrdNumLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(64, 64, 64)
                        .addGroup(CreateOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(CreateOrdNumTxt, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CreateRdatePc, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CreateVendCmbBx, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CreateShipLocCmbBx, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CreateCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        CreateOrderDialogLayout.setVerticalGroup(
            CreateOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CreateOrderDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CreateOrderNotExistLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(CreateOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CreateOrdNumLbl)
                    .addComponent(CreateOrdNumTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CreateVendorNumLbl)
                    .addComponent(CreateVendCmbBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CreateShipLocLbl)
                    .addComponent(CreateShipLocCmbBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CreateRdateLbl)
                    .addComponent(CreateRdatePc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(CreateOrderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CreateNewBtn)
                    .addComponent(CreateCancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Echo");
        setBackground(new java.awt.Color(0, 102, 102));
        setFocusable(false);
        setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        setIconImages(null);
        setLocation(new java.awt.Point(0, 0));
        setMinimumSize(new java.awt.Dimension(800, 1280));
        setName("Echo"); // NOI18N
        setPreferredSize(new java.awt.Dimension(800, 1280));
        setSize(new java.awt.Dimension(800, 1280));
        setType(java.awt.Window.Type.UTILITY);

        ToolBar.setBackground(new java.awt.Color(214, 214, 214));
        ToolBar.setFloatable(false);
        ToolBar.setRollover(true);
        ToolBar.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        ToolBar.setMaximumSize(new java.awt.Dimension(32767, 32));
        ToolBar.setName("UserTag"); // NOI18N

        UserLbl.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        UserLbl.setText("Not logged in");
        UserLbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ToolBar.add(UserLbl);

        TabPanel.setBackground(new java.awt.Color(0, 102, 102));
        TabPanel.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        TabPanel.setMaximumSize(new java.awt.Dimension(640000, 640000));
        TabPanel.setMinimumSize(new java.awt.Dimension(800, 1280));
        TabPanel.setName("WorkingTabs"); // NOI18N
        TabPanel.setPreferredSize(new java.awt.Dimension(800, 1280));
        TabPanel.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TabPanelStateChanged(evt);
            }
        });

        ReceiveTb.setBackground(new java.awt.Color(0, 102, 102));

        RcvTabTitleLbl.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        RcvTabTitleLbl.setForeground(new java.awt.Color(214, 214, 214));
        RcvTabTitleLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/resources/EchoLogo.jpg"))); // NOI18N
        RcvTabTitleLbl.setText("Inbound View");
        RcvTabTitleLbl.setFocusable(false);
        RcvTabTitleLbl.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        RcvTabTitleLbl.setIconTextGap(40);

        RcvOrdrLbl.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        RcvOrdrLbl.setForeground(new java.awt.Color(214, 214, 214));
        RcvOrdrLbl.setText("ORDER NUMBER:");

        RcvOrdrTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RcvOrdrTxtActionPerformed(evt);
            }
        });

        RcvOrdrBtn.setText("Lookup");
        RcvOrdrBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RcvOrdrBtnActionPerformed(evt);
            }
        });

        RcvVendorLbl.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        RcvVendorLbl.setForeground(new java.awt.Color(214, 214, 214));
        RcvVendorLbl.setText("Vendor:");

        RcvVendorTxt.setEditable(false);
        RcvVendorTxt.setFocusable(false);

        RcvRdateLbl.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        RcvRdateLbl.setForeground(new java.awt.Color(214, 214, 214));
        RcvRdateLbl.setText("Request Date:");

        RcvRdateBtn.setText("Update");
        RcvRdateBtn.setActionCommand("UpdateRD");
        RcvRdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RcvRdateBtnActionPerformed(evt);
            }
        });

        RcvFcostLbl.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        RcvFcostLbl.setForeground(new java.awt.Color(214, 214, 214));
        RcvFcostLbl.setText("Freight Cost:");

        RcvFcostTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RcvFcostTxtActionPerformed(evt);
            }
        });

        RcvFcostBtn.setText("Update");
        RcvFcostBtn.setActionCommand("UpdateFC");
        RcvFcostBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RcvFcostBtnActionPerformed(evt);
            }
        });

        RcvFPdateLBL.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        RcvFPdateLBL.setForeground(new java.awt.Color(214, 214, 214));
        RcvFPdateLBL.setText("Freight Paid Date:");

        RcvFPdateBtn.setText("Update");
        RcvFPdateBtn.setActionCommand("UpdateFP");
        RcvFPdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RcvFPdateBtnActionPerformed(evt);
            }
        });

        RcvLocLbl.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        RcvLocLbl.setForeground(new java.awt.Color(214, 214, 214));
        RcvLocLbl.setText("Ship Location:");

        RcvSdateLbl.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        RcvSdateLbl.setForeground(new java.awt.Color(214, 214, 214));
        RcvSdateLbl.setText("Ship Date:");

        RcvDnumLbl.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        RcvDnumLbl.setForeground(new java.awt.Color(214, 214, 214));
        RcvDnumLbl.setText("Delivery #(ADR):");

        RcvSnotesLbl.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        RcvSnotesLbl.setForeground(new java.awt.Color(214, 214, 214));
        RcvSnotesLbl.setText("Shipe Notes:");

        RcvSnotesTxtA.setColumns(20);
        RcvSnotesTxtA.setRows(5);
        RcvSnotesScroll.setViewportView(RcvSnotesTxtA);

        RcvSnotesBtn.setText("Update");
        RcvSnotesBtn.setActionCommand("UpdateDN");
        RcvSnotesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RcvSnotesBtnActionPerformed(evt);
            }
        });

        RcvGrossLbl.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        RcvGrossLbl.setForeground(new java.awt.Color(214, 214, 214));
        RcvGrossLbl.setText("Gross Weight:");

        RcvGrossBtn.setText("Update");
        RcvGrossBtn.setActionCommand("UpdateDN");
        RcvGrossBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RcvGrossBtnActionPerformed(evt);
            }
        });

        RcvAdateLbl.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        RcvAdateLbl.setForeground(new java.awt.Color(214, 214, 214));
        RcvAdateLbl.setText("Recieve Date:");

        RcvLocBtn.setText("Update");
        RcvLocBtn.setActionCommand("UpdateSL");
        RcvLocBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RcvLocBtnActionPerformed(evt);
            }
        });

        RcvSdateBtn.setText("Update");
        RcvSdateBtn.setActionCommand("UpdateSD");
        RcvSdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RcvSdateBtnActionPerformed(evt);
            }
        });

        RcvDnumBtn.setText("Update");
        RcvDnumBtn.setActionCommand("UpdateDN");
        RcvDnumBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RcvDnumBtnActionPerformed(evt);
            }
        });

        RcvAdateBtn.setText("Update");
        RcvAdateBtn.setActionCommand("UpdateDN");
        RcvAdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RcvAdateBtnActionPerformed(evt);
            }
        });

        RcvLocCmbBx.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        RcvLocCmbBx.setMaximumRowCount(25);
        RcvLocCmbBx.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout ReceiveTbLayout = new javax.swing.GroupLayout(ReceiveTb);
        ReceiveTb.setLayout(ReceiveTbLayout);
        ReceiveTbLayout.setHorizontalGroup(
            ReceiveTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReceiveTbLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ReceiveTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RcvTabTitleLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 826, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ReceiveTbLayout.createSequentialGroup()
                        .addGroup(ReceiveTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(RcvOrdrLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RcvSdateLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RcvLocLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RcvFPdateLBL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RcvFcostLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RcvRdateLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RcvVendorLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RcvDnumLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RcvSnotesLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RcvGrossLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RcvAdateLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(ReceiveTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RcvGrossTxt)
                            .addComponent(RcvSnotesScroll, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(RcvDnumTxt, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(RcvFcostTxt, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(RcvVendorTxt)
                            .addComponent(RcvRdatePc, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RcvSdatePc, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RcvOrdrTxt)
                            .addComponent(RcvAdatePc, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RcvLocCmbBx, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RcvFPdatePc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ReceiveTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ReceiveTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(RcvSnotesBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(RcvDnumBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(RcvSdateBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(RcvLocBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(RcvFPdateBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(RcvFcostBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(RcvRdateBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(RcvOrdrBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(RcvGrossBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(RcvAdateBtn, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        ReceiveTbLayout.setVerticalGroup(
            ReceiveTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReceiveTbLayout.createSequentialGroup()
                .addComponent(RcvTabTitleLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ReceiveTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RcvOrdrLbl)
                    .addComponent(RcvOrdrBtn)
                    .addComponent(RcvOrdrTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ReceiveTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RcvVendorTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RcvVendorLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ReceiveTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RcvRdateBtn)
                    .addComponent(RcvRdateLbl)
                    .addComponent(RcvRdatePc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ReceiveTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RcvFcostTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RcvFcostBtn)
                    .addComponent(RcvFcostLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ReceiveTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RcvFPdateBtn)
                    .addComponent(RcvFPdateLBL)
                    .addComponent(RcvFPdatePc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ReceiveTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RcvLocBtn)
                    .addComponent(RcvLocLbl)
                    .addComponent(RcvLocCmbBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ReceiveTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RcvSdateBtn)
                    .addComponent(RcvSdateLbl)
                    .addComponent(RcvSdatePc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ReceiveTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RcvDnumTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RcvDnumBtn)
                    .addComponent(RcvDnumLbl))
                .addGap(32, 32, 32)
                .addGroup(ReceiveTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ReceiveTbLayout.createSequentialGroup()
                        .addComponent(RcvSnotesLbl)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(ReceiveTbLayout.createSequentialGroup()
                        .addGroup(ReceiveTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RcvSnotesScroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RcvSnotesBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ReceiveTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RcvGrossTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RcvGrossLbl)
                            .addComponent(RcvGrossBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(ReceiveTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RcvAdateLbl)
                    .addComponent(RcvAdatePc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RcvAdateBtn))
                .addGap(718, 718, 718))
        );

        TabPanel.addTab("Receiveing", ReceiveTb);

        HeatAssignment.setBackground(new java.awt.Color(0, 102, 102));
        HeatAssignment.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                HeatAssignmentFocusGained(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(214, 214, 214));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/resources/EchoLogo.jpg"))); // NOI18N
        jLabel3.setText("     Heat Assignment");
        jLabel3.setToolTipText("");

        HeatOrdersTbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HeatOrdersTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "OID", "Order Number", "Sorting Heat", "Production Heat"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        HeatOrdersTbl.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        HeatOrdersTbl.setGridColor(new java.awt.Color(0, 153, 153));
        HeatOrdersTbl.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        HeatOrdersTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HeatOrdersTblMouseClicked(evt);
            }
        });
        HeatOrderScroll.setViewportView(HeatOrdersTbl);

        HeatSortTxt.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        HeatProdTxt.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        HeatSortBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HeatSortBtn.setText("Update Sort");
        HeatSortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HeatSortBtnActionPerformed(evt);
            }
        });

        HeatProdBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HeatProdBtn.setText("Update Production");
        HeatProdBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HeatProdBtnActionPerformed(evt);
            }
        });

        HeatOrdLbl.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        HeatOrdLbl.setForeground(new java.awt.Color(214, 214, 214));
        HeatOrdLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        HeatOrdLbl.setText("ORDER");

        javax.swing.GroupLayout HeatAssignmentLayout = new javax.swing.GroupLayout(HeatAssignment);
        HeatAssignment.setLayout(HeatAssignmentLayout);
        HeatAssignmentLayout.setHorizontalGroup(
            HeatAssignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 846, Short.MAX_VALUE)
            .addGroup(HeatAssignmentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(HeatAssignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(HeatOrderScroll)
                    .addGroup(HeatAssignmentLayout.createSequentialGroup()
                        .addComponent(HeatSortTxt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(HeatSortBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(HeatProdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(HeatProdBtn))
                    .addComponent(HeatOrdLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        HeatAssignmentLayout.setVerticalGroup(
            HeatAssignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HeatAssignmentLayout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HeatOrderScroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HeatOrdLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HeatAssignmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HeatSortTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HeatSortBtn)
                    .addComponent(HeatProdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HeatProdBtn))
                .addContainerGap(646, Short.MAX_VALUE))
        );

        TabPanel.addTab("Heat Assignment", HeatAssignment);

        ProductionManager.setBackground(new java.awt.Color(0, 102, 102));
        ProductionManager.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        ProductionManager.setPreferredSize(new java.awt.Dimension(800, 598));

        PMTabLbl.setBackground(new java.awt.Color(0, 0, 0));
        PMTabLbl.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        PMTabLbl.setForeground(new java.awt.Color(214, 214, 214));
        PMTabLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/resources/EchoLogo.jpg"))); // NOI18N
        PMTabLbl.setText("Producion Manager View");
        PMTabLbl.setIconTextGap(30);

        PMOrderLbl.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        PMOrderLbl.setForeground(new java.awt.Color(214, 214, 214));
        PMOrderLbl.setText("Order Number:");
        PMOrderLbl.setFocusable(false);

        PMOrderTxt.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        PMOrderBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMOrderBtn.setText("Lookup");
        PMOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PMOrderBtnActionPerformed(evt);
            }
        });

        PMVendorLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMVendorLbl.setForeground(new java.awt.Color(214, 214, 214));
        PMVendorLbl.setText("Vendor:");
        PMVendorLbl.setFocusable(false);

        PMVendorTxt.setEditable(false);
        PMVendorTxt.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMVendorTxt.setFocusable(false);

        PMRdateLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMRdateLbl.setForeground(new java.awt.Color(214, 214, 214));
        PMRdateLbl.setText("Recieve Date:");

        PMRdatePc.setEditable(false);
        PMRdatePc.setEnabled(false);
        PMRdatePc.setFocusable(false);
        PMRdatePc.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMRdatePc.setLightWeightPopupEnabled(false);

        PMGrossLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMGrossLbl.setForeground(new java.awt.Color(214, 214, 214));
        PMGrossLbl.setText("Gross Weight:");

        PMSnotesLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMSnotesLbl.setForeground(new java.awt.Color(214, 214, 214));
        PMSnotesLbl.setText("Shipping Notes:");

        PMGrossTxt.setEditable(false);
        PMGrossTxt.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMGrossTxt.setFocusable(false);

        PMSheatBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMSheatBtn.setText("Update");
        PMSheatBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PMSheatBtnActionPerformed(evt);
            }
        });

        PMSCompBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMSCompBtn.setText("Update");
        PMSCompBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PMSCompBtnActionPerformed(evt);
            }
        });

        PMSnotesTxtA.setEditable(false);
        PMSnotesTxtA.setColumns(20);
        PMSnotesTxtA.setRows(5);
        PMSnotesTxtA.setEnabled(false);
        PMSnotesTxtA.setFocusable(false);
        jScrollPane1.setViewportView(PMSnotesTxtA);

        PMSheatLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMSheatLbl.setForeground(new java.awt.Color(214, 214, 214));
        PMSheatLbl.setText("Sorting Heat Number:");

        PMBScanTxt.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        PMSCompLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMSCompLbl.setForeground(new java.awt.Color(214, 214, 214));
        PMSCompLbl.setText("Sort Complete Date:");

        PMSCompPc.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        PMBScanLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMBScanLbl.setForeground(new java.awt.Color(214, 214, 214));
        PMBScanLbl.setText("Box Scan HDD Count:");

        PMBScanBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMBScanBtn.setText("Update");
        PMBScanBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PMBScanBtnActionPerformed(evt);
            }
        });

        PMSheatTxt.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        PMScanCompLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMScanCompLbl.setForeground(new java.awt.Color(214, 214, 214));
        PMScanCompLbl.setText("Box Scan Complete Date:");

        PMScanCompPc.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        PMScanCompBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMScanCompBtn.setText("Update");
        PMScanCompBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PMScanCompBtnActionPerformed(evt);
            }
        });

        PMPheatLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMPheatLbl.setForeground(new java.awt.Color(214, 214, 214));
        PMPheatLbl.setText("Production Heat Number:");

        PMPheatTxt.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        PMPheatBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMPheatBtn.setText("Update");
        PMPheatBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PMPheatBtnActionPerformed(evt);
            }
        });

        PMDmanLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMDmanLbl.setForeground(new java.awt.Color(214, 214, 214));
        PMDmanLbl.setText("Dismantle Complete Date:");

        PMDmanPc.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        PMDmanBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMDmanBtn.setText("Update");
        PMDmanBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PMDmanBtnActionPerformed(evt);
            }
        });

        PMSentLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMSentLbl.setForeground(new java.awt.Color(214, 214, 214));
        PMSentLbl.setText("HDD Sent to Reuse Count:");

        PMSentTxt.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        PMSentBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMSentBtn.setText("Update");
        PMSentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PMSentBtnActionPerformed(evt);
            }
        });

        PMSentDtLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMSentDtLbl.setForeground(new java.awt.Color(214, 214, 214));
        PMSentDtLbl.setText("HDD Sent Complete Date:");

        PMSentDtBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMSentDtBtn.setText("Update");
        PMSentDtBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PMSentDtBtnActionPerformed(evt);
            }
        });

        PMSentDtPc.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        PMHDRecieveLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMHDRecieveLbl.setForeground(new java.awt.Color(214, 214, 214));
        PMHDRecieveLbl.setText("Reuse Received Count:");

        PMHDScanLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMHDScanLbl.setForeground(new java.awt.Color(214, 214, 214));
        PMHDScanLbl.setText("Reuse Scan Count:");

        PMHDRecieveTxt.setEditable(false);
        PMHDRecieveTxt.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMHDRecieveTxt.setFocusable(false);

        PMHDScanTxt.setEditable(false);
        PMHDScanTxt.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMHDScanTxt.setFocusable(false);

        PMOnotesLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMOnotesLbl.setForeground(new java.awt.Color(214, 214, 214));
        PMOnotesLbl.setText("Order Notes:");

        PMOnotesTxtA.setColumns(20);
        PMOnotesTxtA.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMOnotesTxtA.setRows(5);
        jScrollPane2.setViewportView(PMOnotesTxtA);

        PMOnotesBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMOnotesBtn.setText("Update");
        PMOnotesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PMOnotesBtnActionPerformed(evt);
            }
        });

        PMBSAddBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMBSAddBtn.setText("Add +");
        PMBSAddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PMBSAddBtnActionPerformed(evt);
            }
        });

        PMBSAlterTxt.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        PMBSSubBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMBSSubBtn.setText("Subtract -");
        PMBSSubBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PMBSSubBtnActionPerformed(evt);
            }
        });

        PMSentAlterTxt.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        PMSentAddBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMSentAddBtn.setText("Add +");
        PMSentAddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PMSentAddBtnActionPerformed(evt);
            }
        });

        PMSentSubBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        PMSentSubBtn.setText("Subtract -");
        PMSentSubBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PMSentSubBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ProductionManagerLayout = new javax.swing.GroupLayout(ProductionManager);
        ProductionManager.setLayout(ProductionManagerLayout);
        ProductionManagerLayout.setHorizontalGroup(
            ProductionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PMTabLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(ProductionManagerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ProductionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(PMHDScanLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PMSentDtLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PMSentLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PMPheatLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PMScanCompLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PMBScanLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PMSCompLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PMSheatLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PMSnotesLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PMGrossLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PMRdateLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PMVendorLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PMOrderLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PMDmanLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PMHDRecieveLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PMOnotesLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ProductionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ProductionManagerLayout.createSequentialGroup()
                        .addGroup(ProductionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ProductionManagerLayout.createSequentialGroup()
                                .addComponent(PMBScanTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PMBScanBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PMBSAlterTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PMBSAddBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(PMHDScanTxt)
                            .addComponent(PMHDRecieveTxt)
                            .addComponent(PMOrderTxt)
                            .addComponent(PMVendorTxt)
                            .addComponent(PMRdatePc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PMGrossTxt)
                            .addComponent(jScrollPane1)
                            .addComponent(PMSheatTxt)
                            .addComponent(PMSCompPc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PMScanCompPc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PMPheatTxt)
                            .addComponent(PMDmanPc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PMSentDtPc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ProductionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(PMSentDtBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PMOrderBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PMSheatBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PMSCompBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PMPheatBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PMScanCompBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PMDmanBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PMOnotesBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PMBSSubBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(ProductionManagerLayout.createSequentialGroup()
                        .addComponent(PMSentTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PMSentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PMSentAlterTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PMSentAddBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PMSentSubBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        ProductionManagerLayout.setVerticalGroup(
            ProductionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProductionManagerLayout.createSequentialGroup()
                .addComponent(PMTabLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ProductionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PMOrderLbl)
                    .addComponent(PMOrderTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PMOrderBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ProductionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PMVendorLbl)
                    .addComponent(PMVendorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ProductionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PMRdateLbl)
                    .addComponent(PMRdatePc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ProductionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PMGrossLbl)
                    .addComponent(PMGrossTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ProductionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PMSnotesLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ProductionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PMSheatLbl)
                    .addComponent(PMSheatBtn)
                    .addComponent(PMSheatTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ProductionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PMSCompLbl)
                    .addComponent(PMSCompPc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PMSCompBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ProductionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PMBScanBtn)
                    .addComponent(PMBScanTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PMBScanLbl)
                    .addComponent(PMBSAddBtn)
                    .addComponent(PMBSAlterTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PMBSSubBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ProductionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PMScanCompLbl)
                    .addComponent(PMScanCompPc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PMScanCompBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ProductionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PMPheatLbl)
                    .addComponent(PMPheatBtn)
                    .addComponent(PMPheatTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ProductionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PMDmanLbl)
                    .addComponent(PMDmanPc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PMDmanBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ProductionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PMSentAlterTxt)
                    .addComponent(PMSentTxt)
                    .addGroup(ProductionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(PMSentLbl)
                        .addComponent(PMSentAddBtn)
                        .addComponent(PMSentSubBtn)
                        .addComponent(PMSentBtn)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ProductionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PMSentDtBtn)
                    .addComponent(PMSentDtLbl)
                    .addComponent(PMSentDtPc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ProductionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PMHDRecieveLbl)
                    .addComponent(PMHDRecieveTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ProductionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PMHDScanTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PMHDScanLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ProductionManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PMOnotesLbl)
                    .addComponent(PMOnotesBtn)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(484, 484, 484))
        );

        TabPanel.addTab("Production Manager", ProductionManager);

        HDDManager.setBackground(new java.awt.Color(0, 102, 102));

        jLabel15.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(214, 214, 214));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/resources/EchoLogo.jpg"))); // NOI18N
        jLabel15.setText("     HDD Manager");
        jLabel15.setToolTipText("");

        HDDManOrderLbl.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        HDDManOrderLbl.setForeground(new java.awt.Color(214, 214, 214));
        HDDManOrderLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        HDDManOrderLbl.setText("ORDER NUMBER:");

        HDDManOrderTxt.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManOrderTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HDDManOrderTxtActionPerformed(evt);
            }
        });

        HDDManOrderBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManOrderBtn.setText("Lookup");
        HDDManOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HDDManOrderBtnActionPerformed(evt);
            }
        });

        HDDManVendLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManVendLbl.setForeground(new java.awt.Color(214, 214, 214));
        HDDManVendLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        HDDManVendLbl.setText("Vendor:  ");

        HDDManVendTxt.setEditable(false);
        HDDManVendTxt.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManVendTxt.setFocusable(false);

        HDDManBSCLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManBSCLbl.setForeground(new java.awt.Color(214, 214, 214));
        HDDManBSCLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        HDDManBSCLbl.setText("Box Scan HDD Count:  ");

        HDDManBSCTxt.setEditable(false);
        HDDManBSCTxt.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManBSCTxt.setFocusable(false);

        HDDManBSCompLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManBSCompLbl.setForeground(new java.awt.Color(214, 214, 214));
        HDDManBSCompLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        HDDManBSCompLbl.setText("Box Scan Complete Date:  ");

        HDDManSerialCLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManSerialCLbl.setForeground(new java.awt.Color(214, 214, 214));
        HDDManSerialCLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        HDDManSerialCLbl.setText("Serialization HDD Count:  ");

        HDDManSerialCTxt.setEditable(false);
        HDDManSerialCTxt.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManSerialCTxt.setFocusable(false);

        HDDManSerialCompLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManSerialCompLbl.setForeground(new java.awt.Color(214, 214, 214));
        HDDManSerialCompLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        HDDManSerialCompLbl.setText("Serialization Completion Date:  ");

        HDDManSerialCompPc.setEditable(false);
        HDDManSerialCompPc.setFocusable(false);
        HDDManSerialCompPc.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        HDDManSerialCompBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManSerialCompBtn.setText("Update");
        HDDManSerialCompBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HDDManSerialCompBtnActionPerformed(evt);
            }
        });

        HDDManDmanCLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManDmanCLbl.setForeground(new java.awt.Color(214, 214, 214));
        HDDManDmanCLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        HDDManDmanCLbl.setText("Dismantle Complete Date:  ");

        HDDManDmanCPc.setEditable(false);
        HDDManDmanCPc.setFocusable(false);
        HDDManDmanCPc.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        HDDManSentCLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManSentCLbl.setForeground(new java.awt.Color(214, 214, 214));
        HDDManSentCLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        HDDManSentCLbl.setText("HDD Count - Sent To Reuse:  ");

        HDDManSentCTxt.setEditable(false);
        HDDManSentCTxt.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManSentCTxt.setFocusable(false);

        HDDManCompDLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManCompDLbl.setForeground(new java.awt.Color(214, 214, 214));
        HDDManCompDLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        HDDManCompDLbl.setText("Completed Order HDD Delivery Date:  ");

        HDDManCompDPc.setEditable(false);
        HDDManCompDPc.setFocusable(false);
        HDDManCompDPc.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        HDDManRecieveLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManRecieveLbl.setForeground(new java.awt.Color(214, 214, 214));
        HDDManRecieveLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        HDDManRecieveLbl.setText("Reuse HDD Received:  ");

        HDDManRecieveTxt.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        HDDManRecieveUDBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManRecieveUDBtn.setText("Update");
        HDDManRecieveUDBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HDDManRecieveUDBtnActionPerformed(evt);
            }
        });

        HDDManRAlterTxt.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManRAlterTxt.setFocusable(false);

        HDDManRAddBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManRAddBtn.setText("Add +");
        HDDManRAddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HDDManRAddBtnActionPerformed(evt);
            }
        });

        HDDManRSubBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManRSubBtn.setText("Subtract -");
        HDDManRSubBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HDDManRSubBtnActionPerformed(evt);
            }
        });

        HDDManRecieveCompLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManRecieveCompLbl.setForeground(new java.awt.Color(214, 214, 214));
        HDDManRecieveCompLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        HDDManRecieveCompLbl.setText("Reuse HDD Received Complete Date:  ");

        HDDManRecieveCompPc.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        HDDManRecieveCompBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManRecieveCompBtn.setText("Update");
        HDDManRecieveCompBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HDDManRecieveCompBtnActionPerformed(evt);
            }
        });

        HDDManSizeTbl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        HDDManSizeTbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManSizeTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "HDD Size", "HDD Count In", "HDD Count Out"
            }
        ));
        HDDManTblPnl.setViewportView(HDDManSizeTbl);

        jLabel53.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel53.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel53.setText("Pallet Count");

        jButton20.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jButton20.setText("Add +");

        jButton23.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jButton23.setText("Subtract -");

        jTextField30.setEditable(false);
        jTextField30.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jTextField30.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField30.setFocusable(false);

        jTextField1.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        jTextField2.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        jButton1.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jButton1.setText("Update");

        jComboBox1.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout HDDManLanesPnlLayout = new javax.swing.GroupLayout(HDDManLanesPnl);
        HDDManLanesPnl.setLayout(HDDManLanesPnlLayout);
        HDDManLanesPnlLayout.setHorizontalGroup(
            HDDManLanesPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HDDManLanesPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(HDDManLanesPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(HDDManLanesPnlLayout.createSequentialGroup()
                        .addGroup(HDDManLanesPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField30)
                            .addComponent(jLabel53, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(HDDManLanesPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(HDDManLanesPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        HDDManLanesPnlLayout.setVerticalGroup(
            HDDManLanesPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HDDManLanesPnlLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HDDManLanesPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel53)
                    .addComponent(jButton20)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HDDManLanesPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton23)
                    .addComponent(jTextField30, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        HDDManSOFLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManSOFLbl.setForeground(new java.awt.Color(214, 214, 214));
        HDDManSOFLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        HDDManSOFLbl.setText("Scan Out Failed:  ");

        HDDManSOFTxt.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        HDDManSOPLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManSOPLbl.setForeground(new java.awt.Color(214, 214, 214));
        HDDManSOPLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        HDDManSOPLbl.setText("Scan Out Passed:  ");

        HDDManSOPTxt.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        HDDManSODLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManSODLbl.setForeground(new java.awt.Color(214, 214, 214));
        HDDManSODLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        HDDManSODLbl.setText("Scan Out Delta:  ");

        HDDManSODTxt.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        HDDManRdateLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManRdateLbl.setForeground(new java.awt.Color(214, 214, 214));
        HDDManRdateLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        HDDManRdateLbl.setText("HDD Report Complete Date:  ");

        HDDManRdatePc.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        HDDManOnotesLbl.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManOnotesLbl.setForeground(new java.awt.Color(214, 214, 214));
        HDDManOnotesLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        HDDManOnotesLbl.setText("Order Notes:  ");

        HDDManOnotesTxtA.setColumns(20);
        HDDManOnotesTxtA.setRows(5);
        jScrollPane5.setViewportView(HDDManOnotesTxtA);

        HDDManOnotesBtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        HDDManOnotesBtn.setText("Update");
        HDDManOnotesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HDDManOnotesBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout HDDManagerLayout = new javax.swing.GroupLayout(HDDManager);
        HDDManager.setLayout(HDDManagerLayout);
        HDDManagerLayout.setHorizontalGroup(
            HDDManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(HDDManagerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(HDDManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HDDManagerLayout.createSequentialGroup()
                        .addComponent(HDDManOnotesLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(HDDManOnotesBtn))
                    .addGroup(HDDManagerLayout.createSequentialGroup()
                        .addGroup(HDDManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(HDDManRdateLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(HDDManSOPLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(HDDManSOFLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(HDDManRecieveCompLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                            .addComponent(HDDManRecieveLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(HDDManCompDLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(HDDManSentCLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(HDDManDmanCLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(HDDManSerialCompLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(HDDManSerialCLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(HDDManBSCompLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(HDDManBSCLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(HDDManVendLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(HDDManOrderLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(HDDManSODLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(HDDManTblPnl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(HDDManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(HDDManBSCTxt)
                            .addComponent(HDDManVendTxt, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(HDDManOrderTxt, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(HDDManSerialCTxt)
                            .addComponent(HDDManSerialCompPc, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                            .addComponent(HDDManDmanCPc, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(HDDManSentCTxt, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(HDDManCompDPc, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(HDDManRecieveCompPc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(HDDManRecieveTxt)
                            .addComponent(HDDManSOFTxt)
                            .addComponent(HDDManSOPTxt)
                            .addComponent(HDDManSODTxt)
                            .addComponent(HDDManRdatePc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(HDDManBSCompPc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(HDDManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(HDDManagerLayout.createSequentialGroup()
                                .addComponent(HDDManRecieveUDBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(HDDManRAlterTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(HDDManRAddBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(HDDManRSubBtn))
                            .addComponent(HDDManLanesPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(HDDManOrderBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(HDDManRecieveCompBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                            .addComponent(HDDManSerialCompBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        HDDManagerLayout.setVerticalGroup(
            HDDManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HDDManagerLayout.createSequentialGroup()
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HDDManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HDDManOrderLbl)
                    .addComponent(HDDManOrderBtn)
                    .addComponent(HDDManOrderTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HDDManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HDDManVendLbl)
                    .addComponent(HDDManVendTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HDDManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HDDManBSCLbl)
                    .addComponent(HDDManBSCTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HDDManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HDDManBSCompLbl)
                    .addComponent(HDDManBSCompPc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HDDManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HDDManSerialCLbl)
                    .addComponent(HDDManSerialCTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HDDManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HDDManSerialCompLbl)
                    .addComponent(HDDManSerialCompPc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HDDManSerialCompBtn))
                .addGap(3, 3, 3)
                .addGroup(HDDManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HDDManDmanCLbl)
                    .addComponent(HDDManDmanCPc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HDDManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HDDManSentCLbl)
                    .addComponent(HDDManSentCTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HDDManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HDDManCompDLbl)
                    .addComponent(HDDManCompDPc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HDDManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HDDManRecieveLbl)
                    .addComponent(HDDManRecieveTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HDDManRAddBtn)
                    .addComponent(HDDManRAlterTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HDDManRSubBtn)
                    .addComponent(HDDManRecieveUDBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HDDManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HDDManRecieveCompLbl)
                    .addComponent(HDDManRecieveCompPc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HDDManRecieveCompBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HDDManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(HDDManLanesPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(HDDManTblPnl, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HDDManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(HDDManSOFTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HDDManSOFLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HDDManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(HDDManSOPTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HDDManSOPLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HDDManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(HDDManSODTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HDDManSODLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HDDManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(HDDManRdateLbl)
                    .addComponent(HDDManRdatePc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(HDDManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(HDDManOnotesLbl)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HDDManOnotesBtn))
                .addContainerGap(499, Short.MAX_VALUE))
        );

        TabPanel.addTab("HDD Manager", HDDManager);

        RecordView.setBackground(new java.awt.Color(0, 102, 102));
        RecordView.setAutoscrolls(true);

        jLabel24.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(214, 214, 214));
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/resources/EchoLogo.jpg"))); // NOI18N
        jLabel24.setText("     Record Veiwer");
        jLabel24.setToolTipText("");

        jLabel60.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel60.setForeground(new java.awt.Color(214, 214, 214));
        jLabel60.setText("Order Number:");
        jLabel60.setFocusable(false);

        jTextField34.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        jButton24.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jButton24.setText("Lookup");

        jScrollPane6.setViewportBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTable3.setBackground(new java.awt.Color(0, 102, 102));
        jTable3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable3.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jTable3.setForeground(new java.awt.Color(214, 214, 214));
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "", "", "User/TimeStamp"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(jTable3);

        jTable5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable5.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "HDD Size", "HDD Count In", "HDD Count Out"
            }
        ));
        jScrollPane8.setViewportView(jTable5);

        javax.swing.GroupLayout RecordViewLayout = new javax.swing.GroupLayout(RecordView);
        RecordView.setLayout(RecordViewLayout);
        RecordViewLayout.setHorizontalGroup(
            RecordViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(RecordViewLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RecordViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6)
                    .addGroup(RecordViewLayout.createSequentialGroup()
                        .addComponent(jLabel60, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField34, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton24, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        RecordViewLayout.setVerticalGroup(
            RecordViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RecordViewLayout.createSequentialGroup()
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RecordViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel60)
                    .addComponent(jTextField34, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(422, Short.MAX_VALUE))
        );

        TabPanel.addTab("Record Veiwer", RecordView);

        AdminTb.setBackground(new java.awt.Color(0, 102, 102));

        jLabel25.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(214, 214, 214));
        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/resources/EchoLogo.jpg"))); // NOI18N
        jLabel25.setText("     Administration View");
        jLabel25.setToolTipText("");

        javax.swing.GroupLayout AdminTbLayout = new javax.swing.GroupLayout(AdminTb);
        AdminTb.setLayout(AdminTbLayout);
        AdminTbLayout.setHorizontalGroup(
            AdminTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, 846, Short.MAX_VALUE)
        );
        AdminTbLayout.setVerticalGroup(
            AdminTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AdminTbLayout.createSequentialGroup()
                .addComponent(jLabel25)
                .addContainerGap(1150, Short.MAX_VALUE))
        );

        TabPanel.addTab("Administration View", AdminTb);

        WipeReports.setBackground(new java.awt.Color(0, 102, 102));

        WipeReportsLbl.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        WipeReportsLbl.setForeground(new java.awt.Color(214, 214, 214));
        WipeReportsLbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        WipeReportsLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/resources/EchoLogo.jpg"))); // NOI18N
        WipeReportsLbl.setText("    Wipe Reports");
        WipeReportsLbl.setToolTipText("");

        javax.swing.GroupLayout WipeReportsLayout = new javax.swing.GroupLayout(WipeReports);
        WipeReports.setLayout(WipeReportsLayout);
        WipeReportsLayout.setHorizontalGroup(
            WipeReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(WipeReportsLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 846, Short.MAX_VALUE)
        );
        WipeReportsLayout.setVerticalGroup(
            WipeReportsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WipeReportsLayout.createSequentialGroup()
                .addComponent(WipeReportsLbl)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        TabPanel.addTab("Wipe Reports", WipeReports);

        ResaleTb.setBackground(new java.awt.Color(0, 102, 102));

        ResaleLbl.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        ResaleLbl.setForeground(new java.awt.Color(214, 214, 214));
        ResaleLbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ResaleLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/resources/EchoLogo.jpg"))); // NOI18N
        ResaleLbl.setText("     Resale");
        ResaleLbl.setToolTipText("");

        javax.swing.GroupLayout ResaleTbLayout = new javax.swing.GroupLayout(ResaleTb);
        ResaleTb.setLayout(ResaleTbLayout);
        ResaleTbLayout.setHorizontalGroup(
            ResaleTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ResaleLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 846, Short.MAX_VALUE)
        );
        ResaleTbLayout.setVerticalGroup(
            ResaleTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ResaleTbLayout.createSequentialGroup()
                .addComponent(ResaleLbl)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        TabPanel.addTab("Resale", ResaleTb);

        OpsDashTb.setBackground(new java.awt.Color(0, 102, 102));

        DashboardLbl.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        DashboardLbl.setForeground(new java.awt.Color(214, 214, 214));
        DashboardLbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        DashboardLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/resources/EchoLogo.jpg"))); // NOI18N
        DashboardLbl.setText("     Dashboard");
        DashboardLbl.setToolTipText("");

        jLabel27.setText("Orders Inbound");

        jLabel28.setText("Orders Not Processed");

        jLabel47.setText("Tobe Dismantled (lbs)");

        jLabel61.setText("HDD To Be Removed");

        jTextField36.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField36ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel61, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel47, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel28, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                    .addComponent(jLabel27, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField39, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField38, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField37)
                    .addComponent(jTextField36, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(jTextField36, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(jTextField37, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel47)
                    .addComponent(jTextField38, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel61)
                    .addComponent(jTextField39, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Orders", "Recieved", "Weight", "Box Scan Completed", "Box Scan HDD Count", "Dismantle Completed", "Production HDD Count", "Reuse Scan HDD Count"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(jTable4);

        jLabel26.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(214, 214, 214));
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("<From----TO>");

        jTextField35.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        jButton25.setText("Export");

        jButton26.setText("Print");

        jToggleButton1.setText("Filter");

        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Cage Backlog", null, null, null, null},
                {"Wipe Passed", null, null, null, null},
                {"Wipe Failed", null, null, null, null},
                {"Fail Percentage", null, null, null, null},
                {null, null, null, null, null},
                {"For Sale", null, null, null, null},
                {"Sale Price", null, null, null, null}
            },
            new String [] {
                "", "160 GB", "320 GB", "500 GB", "Totals"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane10.setViewportView(jTable6);

        javax.swing.GroupLayout OpsDashTbLayout = new javax.swing.GroupLayout(OpsDashTb);
        OpsDashTb.setLayout(OpsDashTbLayout);
        OpsDashTbLayout.setHorizontalGroup(
            OpsDashTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(DashboardLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(OpsDashTbLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(OpsDashTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(OpsDashTbLayout.createSequentialGroup()
                        .addGroup(OpsDashTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(OpsDashTbLayout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(jXDatePicker8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(OpsDashTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(OpsDashTbLayout.createSequentialGroup()
                                .addComponent(jXDatePicker14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField35, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton25)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton26)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jToggleButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)))
                    .addComponent(jScrollPane7))
                .addContainerGap())
        );
        OpsDashTbLayout.setVerticalGroup(
            OpsDashTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OpsDashTbLayout.createSequentialGroup()
                .addComponent(DashboardLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(OpsDashTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(OpsDashTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jXDatePicker8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jXDatePicker14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField35, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton25)
                        .addComponent(jButton26)
                        .addComponent(jToggleButton1))
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(OpsDashTbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 927, Short.MAX_VALUE)
                .addContainerGap())
        );

        TabPanel.addTab("Dashboard", OpsDashTb);

        About.setBackground(new java.awt.Color(0, 102, 102));
        About.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        jTextPane1.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jTextPane1.setText("Welcome to Echo Environmental's Tracking Tool\n\nThis tool is intended to allow registered users to track loads of serialized material from begining of our process to the end for full reporting and easy tracability.\n\nIf you have not logged in please do so or none of the other tabs will be accessable to you.");
        jScrollPane9.setViewportView(jTextPane1);

        DashboardLbl1.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        DashboardLbl1.setForeground(new java.awt.Color(214, 214, 214));
        DashboardLbl1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        DashboardLbl1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/resources/EchoLogo.jpg"))); // NOI18N
        DashboardLbl1.setText("     About");
        DashboardLbl1.setToolTipText("");

        javax.swing.GroupLayout AboutLayout = new javax.swing.GroupLayout(About);
        About.setLayout(AboutLayout);
        AboutLayout.setHorizontalGroup(
            AboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AboutLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DashboardLbl1, javax.swing.GroupLayout.DEFAULT_SIZE, 826, Short.MAX_VALUE)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        AboutLayout.setVerticalGroup(
            AboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AboutLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(DashboardLbl1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(695, Short.MAX_VALUE))
        );

        TabPanel.addTab("About Echo Tracking Tool", About);

        jToolBar1.setRollover(true);

        LogInOutBtn.setBackground(new java.awt.Color(214, 214, 214));
        LogInOutBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        LogInOutBtn.setText("Login");
        LogInOutBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, java.awt.Color.darkGray, java.awt.Color.lightGray));
        LogInOutBtn.setFocusable(false);
        LogInOutBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        LogInOutBtn.setName("loginBtn"); // NOI18N
        LogInOutBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        LogInOutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogInOutBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(LogInOutBtn);

        ExitBtn.setBackground(new java.awt.Color(214, 214, 214));
        ExitBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        ExitBtn.setText("Exit");
        ExitBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, java.awt.Color.darkGray, java.awt.Color.lightGray));
        ExitBtn.setFocusable(false);
        ExitBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ExitBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ExitBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ExitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(ExitBtn);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(TabPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 851, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TabPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LogInOutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogInOutBtnActionPerformed
        // TODO add your handling code here:
        //make UserNpassword window open and stay on top till working username and password entered.
        OpenUserChangeWindow();
    }//GEN-LAST:event_LogInOutBtnActionPerformed

    private void ExitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitBtnActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_ExitBtnActionPerformed

    private void OpenUserChangeWindow(){
        //create UserNpassword window and lock to front
        LoginUserTxt.setText(classUser);
        LoginPswrdTxt.setText(classPass);
        LogInDialog.setVisible((true));
        LoginUserTxt.requestFocus();
        LoginUserTxt.selectAll();
    }
    
    private void LoginCancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginCancelBtnActionPerformed
        //if valid login then
        LogInDialog.dispose();
        if (classUser.equals("")){
        TabPanel.setEnabledAt(0,false);
        TabPanel.setEnabledAt(1,false);
        TabPanel.setEnabledAt(2,false);
        TabPanel.setEnabledAt(3,false);
        TabPanel.setEnabledAt(4,false);
        TabPanel.setEnabledAt(5,false);
        TabPanel.setEnabledAt(6,false);
        TabPanel.setEnabledAt(7,false);
        TabPanel.setEnabledAt(8,false);
        TabPanel.setSelectedIndex(9);
        }
        
        //else say not a valid login and you must log in to condinue unless you would like to close the application
    }//GEN-LAST:event_LoginCancelBtnActionPerformed

    private void LoginOKBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginOKBtnActionPerformed
        //Check user name and password.  if valid login and hide any screens not allowed
        //if not valid make person loggin and if cancel hide all tabs
        classUser = LoginUserTxt.getText();
        classPass = LoginPswrdTxt.getText();
        //System.out.println(Myurl);//debug test
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            //System.out.println("woot!");
            conn = DriverManager.getConnection(Myurl);
            String SQL = "SELECT * FROM HDD_Records.dbo.Users WHERE Uname LIKE '" + classUser + "' AND Pword LIKE '" + classPass + "';";
            stmt = conn.createStatement();
            rs = stmt.executeQuery(SQL);
            try {  
                if (rs.next()) {  
                    System.out.println(rs.getString("Uname") + " : " + rs.getString("Lname") + ", " + rs.getString("Fname"));
                    UserLbl.setText(rs.getString("Fname")+ " " + rs.getString("Lname"));
                    userAccess[0] = rs.getByte("TAB1");
                    userAccess[1] = rs.getByte("TAB2");
                    userAccess[2] = rs.getByte("TAB3");
                    userAccess[3] = rs.getByte("TAB4");
                    userAccess[4] = rs.getByte("TAB5");
                    userAccess[5] = rs.getByte("TAB6");
                    userAccess[6] = rs.getByte("TAB7");
                    userAccess[7] = rs.getByte("TAB8");
                    userAccess[8] = rs.getByte("TAB9");
                    
                    if (classUser.equals("")){
                        TabPanel.setEnabledAt(0,false);
                        TabPanel.setEnabledAt(1,false);
                        TabPanel.setEnabledAt(2,false);
                        TabPanel.setEnabledAt(3,false);
                        TabPanel.setEnabledAt(4,false);
                        TabPanel.setEnabledAt(5,false);
                        TabPanel.setEnabledAt(6,false);
                        TabPanel.setEnabledAt(7,false);
                        TabPanel.setEnabledAt(8,false);
                        TabPanel.setSelectedIndex(9);
                    }
                    else {
                        switch (userAccess[0]){////////////////////////////////////////////////////switch for Recieving tab
                            case 0://no access
                                TabPanel.setEnabledAt(0,false);
                                break;
                            case 1://view only
                                TabPanel.setEnabledAt(0,true);
                                SetRecieveEmpty();
                                break;
                            case 2://limited access for now is view only
                                TabPanel.setEnabledAt(0,true);
                                SetRecieveLimited();
                                break;
                            case 3://full access
                                TabPanel.setEnabledAt(0,true);
                                SetRecieveFull();
                                break;
                            default://all others are view only for now
                                TabPanel.setEnabledAt(0,true);
                                SetRecieveEmpty();
                                break;
                        }
                        switch (userAccess[1]){////////////////////////////////////////////////switch for Heat Assignment tab
                            case 0://no access
                                TabPanel.setEnabledAt(1,false);
                                break;
                            case 1://view only
                                TabPanel.setEnabledAt(1,true);
                                SetHeatEmpty();
                                break;
                            case 2://limited access for now is view only
                                TabPanel.setEnabledAt(1,true);
                                SetHeatLimited();
                                break;
                            case 3://full access
                                TabPanel.setEnabledAt(1,true);
                                SetHeatFull();
                                break;
                            default://all others are view only for now
                                TabPanel.setEnabledAt(1,true);
                                SetHeatEmpty();
                                break;
                        }
                        switch (userAccess[2]){//////////////////////////////////////////////switch for Production Manager tab
                            case 0://no access
                                TabPanel.setEnabledAt(2,false);
                                break;
                            case 1://view only
                                TabPanel.setEnabledAt(2,true);
                                SetProductionManagerEmpty();
                                break;
                            case 2://limited access for now is view only
                                TabPanel.setEnabledAt(2,true);
                                SetProductionManagerLimited();
                                break;
                            case 3://full access
                                TabPanel.setEnabledAt(2,true);
                                SetProductionManagerFull();
                                break;
                            default://all others are view only for now
                                TabPanel.setEnabledAt(2,true);
                                SetProductionManagerEmpty();
                                break;
                        }
                        switch (userAccess[3]){/////////////////////////////////////////////////switch for HDD Manager tab
                            case 0://no access
                                TabPanel.setEnabledAt(3,false);
                                break;
                            case 1://view only
                                TabPanel.setEnabledAt(3,true);
                                SetHDDManagerEmpty();
                                break;
                            case 2://limited access for now is view only
                                TabPanel.setEnabledAt(3,true);
                                SetHDDManagerLimited();
                                break;
                            case 3://full access
                                TabPanel.setEnabledAt(3,true);
                                SetHDDManagerFull();
                                break;
                            default://all others are view only for now
                                TabPanel.setEnabledAt(3,true);
                                SetHDDManagerEmpty();
                                break;
                        }
                        switch (userAccess[4]){/////////////////////////////////////////////////switch for Record View tab
                            case 0://no access
                                TabPanel.setEnabledAt(4,false);
                                break;
                            case 1://view only
                                TabPanel.setEnabledAt(4,true);
                                SetRecordViewEmpty();
                                break;
                            case 2://limited access for now is view only
                                TabPanel.setEnabledAt(4,true);
                                SetRecordViewLimited();
                                break;
                            case 3://full access
                                TabPanel.setEnabledAt(4,true);
                                SetRecordViewFull();
                                break;
                            default://all others are view only for now
                                TabPanel.setEnabledAt(4,true);
                                SetRecordViewEmpty();
                                break;
                        }
                        switch (userAccess[5]){/////////////////////////////////////////////////switch for Admin View tab
                            case 0://no access
                                TabPanel.setEnabledAt(5,false);
                                break;
                            case 1://view only
                                TabPanel.setEnabledAt(5,true);
                                SetAdminEmpty();
                                break;
                            case 2://limited access for now is view only
                                TabPanel.setEnabledAt(5,true);
                                SetAdminLimited();
                                break;
                            case 3://full access
                                TabPanel.setEnabledAt(5,true);
                                SetAdminFull();
                                break;
                            default://all others are view only for now
                                TabPanel.setEnabledAt(4,true);
                                SetAdminEmpty();
                                break;
                        }
                        switch (userAccess[6]){/////////////////////////////////////////////////switch for Wipe View tab
                            case 0://no access
                                TabPanel.setEnabledAt(6,false);
                                break;
                            case 1://view only
                                TabPanel.setEnabledAt(6,true);
                                SetWipeEmpty();
                                break;
                            case 2://limited access for now is view only
                                TabPanel.setEnabledAt(6,true);
                                SetWipeLimited();
                                break;
                            case 3://full access
                                TabPanel.setEnabledAt(6,true);
                                SetWipeFull();
                                break;
                            default://all others are view only for now
                                TabPanel.setEnabledAt(6,true);
                                SetWipeEmpty();
                                break;
                        }
                        switch (userAccess[7]){/////////////////////////////////////////////////switch for Resale tab
                            case 0://no access
                                TabPanel.setEnabledAt(7,false);
                                break;
                            case 1://view only
                                TabPanel.setEnabledAt(7,true);
                                SetResaleEmpty();
                                break;
                            case 2://limited access for now is view only
                                TabPanel.setEnabledAt(7,true);
                                SetResaleLimited();
                                break;
                            case 3://full access
                                TabPanel.setEnabledAt(7,true);
                                SetResaleFull();
                                break;
                            default://all others are view only for now
                                TabPanel.setEnabledAt(7,true);
                                SetResaleEmpty();
                                break;
                        }
                        switch (userAccess[8]){/////////////////////////////////////////////////switch for Ops Dashboard tab
                            case 0://no access
                                TabPanel.setEnabledAt(8,false);
                                break;
                            case 1://view only
                                TabPanel.setEnabledAt(8,true);
                                SetOpsDashEmpty();
                                break;
                            case 2://limited access for now is view only
                                TabPanel.setEnabledAt(8,true);
                                SetOpsDashLimited();
                                break;
                            case 3://full access
                                TabPanel.setEnabledAt(8,true);
                                SetOpsDashFull();
                                break;
                            default://all others are view only for now
                                TabPanel.setEnabledAt(8,true);
                                SetOpsDashEmpty();
                                break;
                        }
                    }
                    TabPanel.setSelectedIndex(9);
                    LogInDialog.dispose();
                }
                else {
                    LoginUserTxt.setText("");
                    LoginPswrdTxt.setText("");
                    userAccess[0] = 0;
                    userAccess[1] = 0;
                    userAccess[2] = 0;
                    userAccess[3] = 0;
                    userAccess[4] = 0;
                    userAccess[5] = 0;
                    userAccess[6] = 0;
                    userAccess[7] = 0;
                    userAccess[8] = 0;
                    LoginUserTxt.requestFocus();
                }
            } catch (Exception e) {  
                e.printStackTrace();  
            }
        } catch (Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_LoginOKBtnActionPerformed

    private void CreateOrdNumTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateOrdNumTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CreateOrdNumTxtActionPerformed

    private void LoginUserTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginUserTxtActionPerformed
        LoginUserTxt.selectAll();
    }//GEN-LAST:event_LoginUserTxtActionPerformed

    private void LoginPswrdTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginPswrdTxtActionPerformed
        LoginPswrdTxt.selectAll();
    }//GEN-LAST:event_LoginPswrdTxtActionPerformed

    private void CreateCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateCancelActionPerformed
        // TODO add your handling code here:
        SetRecieveEmpty();
        CreateOrderDialog.dispose();
    }//GEN-LAST:event_CreateCancelActionPerformed

    private void CreateNewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateNewBtnActionPerformed
        //verify order number and vendor are entered and that vendor is in the database.
        //Need to ensure that if location and request date are not entered then omit issert into recieving table
        String DisOrder = CreateOrdNumTxt.getText();
        if (!CreateVendCmbBx.getSelectedItem().equals("")){
            try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                System.out.println("Making sure new order does not already exist!");
                conn = DriverManager.getConnection(Myurl);
                String SQL = "SELECT * FROM [HDD_Records].[dbo].[Orders] WHERE InOrdNum = '" + DisOrder + "'";
                System.out.println(SQL);
                stmt = conn.createStatement();
                rs = stmt.executeQuery(SQL);
                try {  
                    if (rs.next()) {System.out.println("Already Exists");}
                    else {
                        SQL = "INSERT INTO [HDD_Records].[dbo].[Orders] (InOrdNum,VID)  VALUES ('" + DisOrder + "', (SELECT VID FROM [HDD_Records].[dbo].[Vendors] WHERE Vendor LIKE '" + CreateVendCmbBx.getSelectedItem() + "'))";
                        System.out.println("Inserting new Order:  " + SQL);
                        stmt = conn.createStatement();
                        stmt.executeUpdate(SQL);
                        try {
                            SQL = "SELECT O.OID, L.LID FROM [HDD_Records].[dbo].[Orders] AS O"
                                    + " INNER JOIN [HDD_Records].[dbo].[Addresses] AS L ON O.VID = L.VID"
                                    + " WHERE InOrdNum LIKE '" + DisOrder +"' AND LocName LIKE '" + CreateShipLocCmbBx.getSelectedItem() + "'";
                            System.out.println("Looking Up OID and LID!\n" + SQL);
                            stmt = conn.createStatement();
                            rs = stmt.executeQuery(SQL);
                            String thisOID;
                            String thisLID;
                            try {  
                                if (rs.next()) {
                                System.out.println("Setting OID and LID!");
                                thisOID = rs.getString("OID");
                                thisLID = rs.getString("LID");
                                //format date for SQL from the picker
                                Date mynowDate = CreateRdatePc.getDate();
                                DateFormat oDateFormat = new SimpleDateFormat("yyyy-MM-dd");
                                String szDate = oDateFormat.format(mynowDate);
                                SQL = "INSERT INTO [HDD_Records].[dbo].[Recieving] (OID,LID,Rdate)VALUES ('" + thisOID + "','"+ thisLID + "', '"+ szDate +"')";
                                System.out.println("Inserting into receiving" + SQL);
                                stmt = conn.createStatement();
                                stmt.executeUpdate(SQL);
                                //close window when finished
                                CreateOrderDialog.dispose();
                                String thisOrder = DisOrder;
                                SetRecieveEmpty();
                                RcvOrdrTxt.setText(thisOrder);
                                }//end if
                            } catch (Exception e){e.printStackTrace();}
                        } catch (Exception e){e.printStackTrace();}
                    }//end else
                } catch (Exception e) {e.printStackTrace();}
            } catch (Exception e){e.printStackTrace();}
//            //Data block for user logging later
//            myTimeStamp = LocalDateTime.now();
//            System.out.println(classUser);
//            System.out.println(myTimeStamp);
        }else {CreateVendCmbBx.requestFocus();}
    }//GEN-LAST:event_CreateNewBtnActionPerformed

    private void CreateVendCmbBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateVendCmbBxActionPerformed
                    CreateShipLocCmbBx.removeAllItems();
                     //get all locations and load all locations
                    CreateShipLocCmbBx.setModel(new DefaultComboBoxModel(getLox4vendor(CreateVendCmbBx.getSelectedItem().toString()).toArray()));
    }//GEN-LAST:event_CreateVendCmbBxActionPerformed

    private void CreateVendCmbBxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CreateVendCmbBxFocusLost
    }//GEN-LAST:event_CreateVendCmbBxFocusLost

    private void TabPanelStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TabPanelStateChanged
        // THIS IS WHERE TAB FOCUS IS DETECTED AND COMPLETED
        JTabbedPane tabSource = (JTabbedPane) evt.getSource();
        int tab = tabSource.getSelectedIndex();

        switch (tab){
            case 0:
            SetRecieveEmpty();
            break;
            case 1:
            refreshHeatsTbl();
            HeatOrdLbl.setText("Order");
            break;
            case 2:
            SetProductionManagerEmpty();
            break;
            case 3:
            break;
            case 4:
            break;
            case 5:
            break;
            case 6:
            break;
            case 7:
            break;
            case 8:
            break;
            default:
            break;
        }
    }//GEN-LAST:event_TabPanelStateChanged

    private void jTextField36ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField36ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField36ActionPerformed

    private void HDDManOnotesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HDDManOnotesBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HDDManOnotesBtnActionPerformed

    private void HDDManRecieveCompBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HDDManRecieveCompBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HDDManRecieveCompBtnActionPerformed

    private void HDDManRSubBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HDDManRSubBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HDDManRSubBtnActionPerformed

    private void HDDManRAddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HDDManRAddBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HDDManRAddBtnActionPerformed

    private void HDDManRecieveUDBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HDDManRecieveUDBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HDDManRecieveUDBtnActionPerformed

    private void HDDManSerialCompBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HDDManSerialCompBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HDDManSerialCompBtnActionPerformed

    private void HDDManOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HDDManOrderBtnActionPerformed
        //============================================================================================================================
        // TODO add your handling code here:================================================================WORK HERE GUS=============
        //============================================================================================================================
        // look up everything for the Production manager tab---------------------------------------
        String OrderNum;
        OrderNum = HDDManOrderTxt.getText();
        //IF BLANK DISABLE EVERYTHING ON THE TAB
        if (OrderNum.equals("")){
            SetHDDManagerEmpty();//remember to write the items in this
        }else {
            //lookup order, if order entered populate tab per user level if not ask if you would like to create order
            try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                System.out.println("looking for order!" + OrderNum);
                conn = DriverManager.getConnection(Myurl);
                String SQL = "SELECT O.OID, V.Vendor, S.BSHDDCount, S.BSdate,P.DManDate,P.Pcount,P.Sdate, T.HDcount, T.Tdate, T.SerialDate, R.LName, R.ColorR, R.ColorG, R.ColorB FROM [HDD_Records].[dbo].[Orders] AS O\n" +
                    "LEFT JOIN [HDD_Records].[dbo].[Vendors] AS V ON O.VID = V.VID\n" +
                    "LEFT JOIN [HDD_Records].[dbo].[Production] AS P ON O.OID = P.OID\n" +
                    "LEFT JOIN [HDD_Records].[dbo].[Transfer] AS T ON O.OID = T.OID\n" +
                    "LEFT JOIN [HDD_Records].[dbo].[SortScan] AS S ON O.OID = S.OID\n" +
                    "LEFT JOIN [HDD_Records].[dbo].[ReUseLocations] AS R ON T.LaneID = R.LaneID\n" +
                    "WHERE O.InOrdNum LIKE '"+ OrderNum +"'";
                System.out.println(SQL);
                stmt = conn.createStatement();
                rs = stmt.executeQuery(SQL);
                try {
                    if (rs.next()) {
                        //If order found do as follows
                        HDDManVendTxt.setText(rs.getString("Vendor"));
                        HDDManBSCTxt.setText(rs.getString("BSHDDCount"));
                        HDDManBSCompPc.setDate(rs.getDate("BSdate"));
                        HDDManSerialCompPc.setDate(rs.getDate("SerialDate"));
                        HDDManDmanCPc.setDate(rs.getDate("DManDate"));
                        HDDManSentCTxt.setText(rs.getString("Sdate"));
                        
                        //switch for setting user access
                        switch (userAccess[0]){
                            case 0://no access
                            HDDManager.setVisible(false);
                            break;
                            case 1://view only
                            break;
                            case 2://limited access
                            break;
                            case 3://full access
                            SetHDDManagerFull();
                            break;
                            default://unknow clear it and burn the evidence
                            SetHDDManagerEmpty();
                            break;
                        }
                    }else {
                        System.out.println("Nope!");
                        //CreateOrdNumTxt.setText(RcvOrdrTxt.getText());
                        SetHDDManagerEmpty();
                        //CreateVendCmbBx.removeAllItems();
                        //CreateVendCmbBx.addItem("");
                        //CreateVendCmbBx.setModel(new DefaultComboBoxModel(getAllVendorNums().toArray()));
                        //CreateOrderDialog.setVisible((true));
                    }
                } catch (Exception e) {e.printStackTrace();}
            } catch (Exception e){e.printStackTrace();}
        }
        
        
        String forTable = HDDManOrderTxt.getText().substring(1);
        /*
        SELECT I.HDDCapacity, COUNT(I.HDDSerial)AS 'Scanned In', COUNT(O.HDDSerial) AS 'Scanned Out' FROM [HDD_Records].[dbo].[HDDCheckIn] AS I
        FULL JOIN [HDD_Records].[dbo].[HDDCheckOut] AS O ON I.HDDSerial = O.HDDSerial
        WHERE HDDIon LIKE '1800953'
        GROUP BY HDDCapacity
        */
    }//GEN-LAST:event_HDDManOrderBtnActionPerformed

    private void HDDManOrderTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HDDManOrderTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HDDManOrderTxtActionPerformed

    private void PMSentSubBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PMSentSubBtnActionPerformed
        // subtracts what is in the PMSentAlterTxt from PMSentTxt and uploads
        int subbed = Integer.parseInt(PMSentTxt.getText()) - Integer.parseInt(PMSentAlterTxt.getText());
        PMSentTxt.setText(String.valueOf(subbed));
        PMSentAlterTxt.setText("");
        updateOrInsertString(PMSentTxt,"Production", "Pcount",PMOrderTxt.getText());
    }//GEN-LAST:event_PMSentSubBtnActionPerformed

    private void PMSentAddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PMSentAddBtnActionPerformed
        // adds what is in the PMSentAlterTxt to PMSentTxt and uploads
        int added = Integer.parseInt(PMSentTxt.getText()) + Integer.parseInt(PMSentAlterTxt.getText());
        PMSentTxt.setText(String.valueOf(added));
        PMSentAlterTxt.setText("");
        updateOrInsertString(PMSentTxt,"Production", "Pcount",PMOrderTxt.getText());
    }//GEN-LAST:event_PMSentAddBtnActionPerformed

    private void PMBSSubBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PMBSSubBtnActionPerformed
        // subtracts what is in the PMBSAlterTxt to PMBScanTxt and uploads
        int subbed = Integer.parseInt(PMBScanTxt.getText()) - Integer.parseInt(PMBSAlterTxt.getText());
        PMBScanTxt.setText(String.valueOf(subbed));
        PMBSAlterTxt.setText("");
        updateOrInsertString(PMBScanTxt,"Production", "BSHDDCount",PMOrderTxt.getText());
    }//GEN-LAST:event_PMBSSubBtnActionPerformed

    private void PMBSAddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PMBSAddBtnActionPerformed
        // adds what is in the PMBSAlterTxt to PMBScanTxt and uploads
        int added = Integer.parseInt(PMBScanTxt.getText()) + Integer.parseInt(PMBSAlterTxt.getText());
        PMBScanTxt.setText(String.valueOf(added));
        PMBSAlterTxt.setText("");
        updateOrInsertString(PMBScanTxt,"Production", "BSHDDCount",PMOrderTxt.getText());
    }//GEN-LAST:event_PMBSAddBtnActionPerformed

    private void PMOnotesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PMOnotesBtnActionPerformed
        // TODO add your handling code here:
        updateOrInsertString(PMOnotesTxtA,"Notes","Onotes",PMOrderTxt.getText());
    }//GEN-LAST:event_PMOnotesBtnActionPerformed

    private void PMSentDtBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PMSentDtBtnActionPerformed
        // Update or insert the Sent to HDD Room date
        updateInsertDate(PMSentDtPc,"Production","Sdate",PMOrderTxt.getText());
    }//GEN-LAST:event_PMSentDtBtnActionPerformed

    private void PMSentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PMSentBtnActionPerformed
        // Update or insert the number of drives sent to HDD Room
        updateOrInsertString(PMSentTxt,"Production", "Pcount", PMOrderTxt.getText());
    }//GEN-LAST:event_PMSentBtnActionPerformed

    private void PMDmanBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PMDmanBtnActionPerformed
        // TODO add your handling code here:
        updateInsertDate(PMDmanPc,"Production","DManDate", PMOrderTxt.getText());
    }//GEN-LAST:event_PMDmanBtnActionPerformed

    private void PMPheatBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PMPheatBtnActionPerformed
        // TODO add your handling code here:
        updateOrInsertString(PMPheatTxt, "Production", "Pheat", PMOrderTxt.getText());
    }//GEN-LAST:event_PMPheatBtnActionPerformed

    private void PMScanCompBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PMScanCompBtnActionPerformed
        // TODO add your handling code here:
        String thisOrd = PMOrderTxt.getText();
        try{
            System.out.println("Updating SortScan");
            Date mynowDate = PMScanCompPc.getDate();
            DateFormat oDateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String szDate = oDateFormat.format(mynowDate);
            //needs to be update or insert if not in.
            String SQL = "IF EXISTS(SELECT OID FROM [HDD_Records].[dbo].[SortScan] "
            + "WHERE OID LIKE (SELECT OID FROM [HDD_Records].[dbo].[Orders] "
            + "WHERE InOrdNum LIKE '" + thisOrd + "')) "
            + "UPDATE [HDD_Records].[dbo].[SortScan] SET BSdate ='"+ szDate +"' "
            + "WHERE OID LIKE (SELECT OID FROM [HDD_Records].[dbo].[Orders] "
            + "WHERE InOrdNum LIKE '" + thisOrd + "') "
            + "ELSE INSERT INTO [HDD_Records].[dbo].[SortScan](OID,BSdate) VALUES((SELECT OID FROM [HDD_Records].[dbo].[Orders] "
            + "WHERE InOrdNum LIKE '" + thisOrd + "'),'" + szDate + "')";
            System.out.println("Updating Box Scan Comp Date with: " + SQL);
            Connection conny = DriverManager.getConnection(Myurl);
            Statement stater =  conny.createStatement();
            stater.executeUpdate(SQL);
        }catch (Exception e) {e.printStackTrace();}
    }//GEN-LAST:event_PMScanCompBtnActionPerformed

    private void PMBScanBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PMBScanBtnActionPerformed
        // TODO Insert or update Scan count
        String thisOrd = PMOrderTxt.getText();
        try{
            System.out.println("Updating Box Scan HDD Count");
            //needs to be update or insert if not in.
            String SQL = "IF EXISTS(SELECT OID FROM [HDD_Records].[dbo].[SortScan] "
            + "WHERE OID LIKE (SELECT OID FROM [HDD_Records].[dbo].[Orders] "
            + "WHERE InOrdNum LIKE '" + thisOrd + "')) "
            + "UPDATE [HDD_Records].[dbo].[SortScan] SET BSHDDCount ='"+ PMBScanTxt.getText() +"' "
            + "WHERE OID LIKE (SELECT OID FROM [HDD_Records].[dbo].[Orders] "
            + "WHERE InOrdNum LIKE '" + thisOrd + "') "
            + "ELSE INSERT INTO [HDD_Records].[dbo].[SortScan](OID,BSHDDCount) VALUES((SELECT OID FROM [HDD_Records].[dbo].[Orders] "
            + "WHERE InOrdNum LIKE '" + thisOrd + "'),'"+PMBScanTxt.getText()+"')";
            System.out.println("Updating Box Scan HDD Count with: " + SQL);
            Connection conny = DriverManager.getConnection(Myurl);
            Statement stater =  conny.createStatement();
            stater.executeUpdate(SQL);
        }catch (Exception e) {e.printStackTrace();}
    }//GEN-LAST:event_PMBScanBtnActionPerformed

    private void PMSCompBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PMSCompBtnActionPerformed
        // TODO add your handling code here:
        String thisOrd = PMOrderTxt.getText();
        try{
            System.out.println("Updating SortScan");
            Date mynowDate = PMSCompPc.getDate();
            DateFormat oDateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String szDate = oDateFormat.format(mynowDate);
            //needs to be update or insert if not in.
            String SQL = "IF EXISTS(SELECT OID FROM [HDD_Records].[dbo].[SortScan] "
            + "WHERE OID LIKE (SELECT OID FROM [HDD_Records].[dbo].[Orders] "
            + "WHERE InOrdNum LIKE '" + thisOrd + "')) "
            + "UPDATE [HDD_Records].[dbo].[SortScan] SET Sdate ='"+ szDate +"' "
            + "WHERE OID LIKE (SELECT OID FROM [HDD_Records].[dbo].[Orders] "
            + "WHERE InOrdNum LIKE '" + thisOrd + "') "
            + "ELSE INSERT INTO [HDD_Records].[dbo].[SortScan](OID,Sdate) VALUES((SELECT OID FROM [HDD_Records].[dbo].[Orders] "
            + "WHERE InOrdNum LIKE '" + thisOrd + "'),'" + szDate + "')";
            System.out.println("Updating Sort Comp Date with: " + SQL);
            Connection conny = DriverManager.getConnection(Myurl);
            Statement stater =  conny.createStatement();
            stater.executeUpdate(SQL);
        }catch (Exception e) {e.printStackTrace();}
    }//GEN-LAST:event_PMSCompBtnActionPerformed

    private void PMSheatBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PMSheatBtnActionPerformed
        // Updates the Sort Heat on the Production Manager Tab
        String thisOrd = PMOrderTxt.getText();
        try{
            System.out.println("Updating SortScan");
            //needs to be update or insert if not in.
            String SQL = "IF EXISTS(SELECT OID FROM [HDD_Records].[dbo].[SortScan] "
            + "WHERE OID LIKE (SELECT OID FROM [HDD_Records].[dbo].[Orders] "
            + "WHERE InOrdNum LIKE '" + thisOrd + "')) "
            + "UPDATE [HDD_Records].[dbo].[SortScan] SET Sheat ='"+ PMSheatTxt.getText() +"' "
            + "WHERE OID LIKE (SELECT OID FROM [HDD_Records].[dbo].[Orders] "
            + "WHERE InOrdNum LIKE '" + thisOrd + "') "
            + "ELSE INSERT INTO [HDD_Records].[dbo].[SortScan](OID,Sheat) VALUES((SELECT OID FROM [HDD_Records].[dbo].[Orders] "
            + "WHERE InOrdNum LIKE '" + thisOrd + "'),'"+PMSheatTxt.getText()+"')";
            System.out.println("Updating Sort Heat with: " + SQL);
            Connection conny = DriverManager.getConnection(Myurl);
            Statement stater =  conny.createStatement();
            stater.executeUpdate(SQL);
        }catch (Exception e) {e.printStackTrace();}
    }//GEN-LAST:event_PMSheatBtnActionPerformed

    private void PMOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PMOrderBtnActionPerformed
        // look up everything for the Production manager tab---------------------------------------
        String OrderNum;
        OrderNum = PMOrderTxt.getText();
        //IF BLANK DISABLE EVERYTHING ON THE TAB
        if (OrderNum.equals("")){
            SetProductionManagerEmpty();
        }else {
            //lookup order, if order entered populate tab per user level if not ask if you would like to create order
            try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                System.out.println("looking for order!" + OrderNum);
                conn = DriverManager.getConnection(Myurl);
                String SQL = "SELECT O.OID, O.InOrdNum, V.Vendor, R.Adate, R.Gross, N.Snotes, N.Onotes, S.Sheat, S.Sdate, S.BSdate, S.BSHDDCount, P.Pheat, P.DManDate, P.Pcount, P.Sdate AS SentToHDD, P.Ddate, T.HDCount, T.Tdate, COUNT(H.HSID) AS HSCount FROM [HDD_Records].[dbo].[Orders] AS O\n" +
                "LEFT JOIN [HDD_Records].[dbo].[Vendors] AS V ON O.VID = V.VID\n" +
                "LEFT JOIN [HDD_Records].[dbo].[Recieving] AS R ON O.OID = R.OID\n" +
                "LEFT JOIN [HDD_Records].[dbo].[Notes] AS N ON O.OID = N.OID\n" +
                "LEFT JOIN [HDD_Records].[dbo].[SortScan] AS S ON O.OID = S.OID\n" +
                "LEFT JOIN [HDD_Records].[dbo].[Production] AS P ON O.OID = P.OID\n" +
                "LEFT JOIN [HDD_Records].[dbo].[Transfer] AS T ON O.OID = T.OID\n" +
                "LEFT JOIN [HDD_Records].[dbo].[HardDrive] AS H ON O.OID = H.OID\n" +
                "WHERE O.InOrdNum LIKE '"+ OrderNum +"'\n" +
                "GROUP BY O.OID, O.InOrdNum, V.Vendor, R.Adate, R.Gross, N.Snotes, N.Onotes, S.Sheat, S.Sdate, S.BSdate, S.BSHDDCount, P.Pheat, P.DManDate, P.Pcount, P.Sdate , P.Ddate, T.HDCount, T.Tdate";
                System.out.println(SQL);
                stmt = conn.createStatement();
                rs = stmt.executeQuery(SQL);
                try {
                    if (rs.next()) {
                        //If order found do as follows
                        PMVendorTxt.setText(rs.getString("Vendor"));
                        PMRdatePc.setDate(rs.getDate("Adate"));
                        PMGrossTxt.setText(rs.getString("Gross"));
                        PMSnotesTxtA.setText(rs.getString("Snotes"));
                        PMSheatTxt.setText(rs.getString("Sheat"));
                        PMSCompPc.setDate(rs.getDate("Sdate"));
                        PMBScanTxt.setText(rs.getString("BSHDDCount"));
                        PMScanCompPc.setDate(rs.getDate("BSdate"));
                        PMPheatTxt.setText(rs.getString("Pheat"));
                        PMDmanPc.setDate(rs.getDate("DManDate"));
                        PMSentTxt.setText(rs.getString("Pcount"));
                        PMSentDtPc.setDate(rs.getDate("SentToHdd"));
                        PMHDRecieveTxt.setText(rs.getString("HDCount"));//need to add data to production table to show recieved into hdd cage
                        PMHDScanTxt.setText(rs.getString("HSCount"));//Also need table entry
                        PMOnotesTxtA.setText(rs.getString("Onotes"));
                        //switch for setting user access
                        switch (userAccess[0]){
                            case 0://no access
                            ProductionManager.setVisible(false);
                            break;
                            case 1://view only
                            break;
                            case 2://limited access
                            break;
                            case 3://full access
                            SetProductionManagerFull();
                            break;
                            default://unknow clear it and burn the evidence
                            SetRecieveEmpty();
                            break;
                        }
                    }else {
                        System.out.println("Nope!");
                        CreateOrdNumTxt.setText(RcvOrdrTxt.getText());
                        SetRecieveEmpty();
                        CreateVendCmbBx.removeAllItems();
                        CreateVendCmbBx.addItem("");
                        CreateVendCmbBx.setModel(new DefaultComboBoxModel(getAllVendorNums().toArray()));
                        CreateOrderDialog.setVisible((true));
                    }
                } catch (Exception e) {e.printStackTrace();}
            } catch (Exception e){e.printStackTrace();}
        }
    }//GEN-LAST:event_PMOrderBtnActionPerformed

    private void HeatAssignmentFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_HeatAssignmentFocusGained
        //mute point not used
        // TODO make buttons update the heat #'s or insert production table and insert heat nums
        refreshHeatsTbl();
    }//GEN-LAST:event_HeatAssignmentFocusGained

    private void HeatProdBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HeatProdBtnActionPerformed
        // TODO add your handling code here:
        if(!HeatOrdLbl.getText().equals("Order")){
            String thisOID = HeatOrdersTbl.getValueAt(HeatOrdersTbl.getSelectedRow(),0).toString();
            try{//TESTED
                System.out.println("Updating Production");
                //needs to be update or insert if not in.
                String SQL = "IF EXISTS(SELECT OID FROM [HDD_Records].[dbo].[Production] "
                + "WHERE OID LIKE '" + thisOID + "') "
                + "UPDATE [HDD_Records].[dbo].[Production] SET Pheat ='"+ HeatProdTxt.getText() +"' "
                + "WHERE OID LIKE '" + thisOID+"' "
                + "ELSE INSERT INTO [HDD_Records].[dbo].[Production](OID,Pheat) VALUES('"+ thisOID +"','"+HeatProdTxt.getText()+"');";
                System.out.println("Updating Production Heat with: " + SQL);
                Connection conny = DriverManager.getConnection(Myurl);
                Statement stater =  conny.createStatement();
                stater.executeUpdate(SQL);
            }catch (Exception e) {e.printStackTrace();}
        }
        // then refresh table
        refreshHeatsTbl();
    }//GEN-LAST:event_HeatProdBtnActionPerformed

    private void HeatSortBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HeatSortBtnActionPerformed
        // TODO Make selected order's Sort heat number update or insert from OID and HeatSortTxt.getText()
        if(!HeatOrdLbl.getText().equals("Order")){
            String thisOID = HeatOrdersTbl.getValueAt(HeatOrdersTbl.getSelectedRow(),0).toString();
            try{//TESTED
                System.out.println("Updating SortScan");
                //needs to be update or insert if not in.
                String SQL = "IF EXISTS(SELECT OID FROM [HDD_Records].[dbo].[SortScan] "
                + "WHERE OID LIKE '" + thisOID + "') "
                + "UPDATE [HDD_Records].[dbo].[SortScan] SET Sheat ='"+ HeatSortTxt.getText() +"' "
                + "WHERE OID LIKE '" + thisOID+"' "
                + "ELSE INSERT INTO [HDD_Records].[dbo].[SortScan](OID,Sheat) VALUES('"+ thisOID +"','"+HeatSortTxt.getText()+"');";
                System.out.println("Updating Sort Heat with: " + SQL);
                Connection conny = DriverManager.getConnection(Myurl);
                Statement stater =  conny.createStatement();
                stater.executeUpdate(SQL);
            }catch (Exception e) {e.printStackTrace();}
        }
        // then refresh table
        refreshHeatsTbl();

    }//GEN-LAST:event_HeatSortBtnActionPerformed

    private void HeatOrdersTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HeatOrdersTblMouseClicked
        // TODO add your handling code here:
        //System.out.println("Row Selected: " + HeatOrdersTbl.getSelectedRow());
        HeatOrdLbl.setText((HeatOrdersTbl.getValueAt(HeatOrdersTbl.getSelectedRow(),1).toString()));
        try{//get data for sort
            HeatSortTxt.setText((HeatOrdersTbl.getValueAt(HeatOrdersTbl.getSelectedRow(),2).toString()));
            HeatSortTxt.setEnabled(true);
            HeatSortBtn.setEnabled(true);
        }catch (Exception e){//if no data for sort default empty
            HeatSortTxt.setText("");
            HeatSortTxt.setEnabled(true);
            HeatSortBtn.setEnabled(true);
        }
        try{//get data for production
            HeatProdTxt.setText((HeatOrdersTbl.getValueAt(HeatOrdersTbl.getSelectedRow(),3).toString()));
            HeatProdTxt.setEnabled(true);
            HeatProdBtn.setEnabled(true);
        }catch (Exception e){//if no data for production default empty
            HeatProdTxt.setText("");
            HeatProdTxt.setEnabled(true);
            HeatProdBtn.setEnabled(true);
        }
    }//GEN-LAST:event_HeatOrdersTblMouseClicked

    private void RcvAdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RcvAdateBtnActionPerformed
        // TODO add your handling code here:
        try{
            //System.out.println("Updating Sdate");
            Date mynowDate = RcvAdatePc.getDate();
            DateFormat oDateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String szDate = oDateFormat.format(mynowDate);
            String SQL = "UPDATE [HDD_Records].[dbo].[Recieving] SET Adate = '" + szDate + "' WHERE OID LIKE (SELECT OID FROM [HDD_Records].[dbo].[Orders] WHERE InOrdNum LIKE '" + RcvOrdrTxt.getText() + "')";
            //System.out.println("Updating Sdate with: " + SQL);
            Connection conny = DriverManager.getConnection(Myurl);
            Statement stater =  conny.createStatement();
            stater.executeUpdate(SQL);
        }catch (Exception e) {e.printStackTrace();}
    }//GEN-LAST:event_RcvAdateBtnActionPerformed

    private void RcvDnumBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RcvDnumBtnActionPerformed
        // TODO add your handling code here:
        try{//TESTED
            System.out.println("Updating DNum");
            String SQL = "UPDATE [HDD_Records].[dbo].[Recieving] SET DNum = '" + RcvDnumTxt.getText() + "' WHERE OID LIKE (SELECT OID FROM [HDD_Records].[dbo].[Orders] WHERE InOrdNum LIKE '" + RcvOrdrTxt.getText() + "')";
            System.out.println("Updating Dnum with: " + SQL);
            Connection conny = DriverManager.getConnection(Myurl);
            Statement stater =  conny.createStatement();
            stater.executeUpdate(SQL);
        }catch (Exception e) {e.printStackTrace();}
    }//GEN-LAST:event_RcvDnumBtnActionPerformed

    private void RcvSdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RcvSdateBtnActionPerformed
        try{
            //System.out.println("Updating Sdate");
            Date mynowDate = RcvSdatePc.getDate();
            DateFormat oDateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String szDate = oDateFormat.format(mynowDate);
            String SQL = "UPDATE [HDD_Records].[dbo].[Recieving] SET Sdate = '" + szDate + "' WHERE OID LIKE (SELECT OID FROM [HDD_Records].[dbo].[Orders] WHERE InOrdNum LIKE '" + RcvOrdrTxt.getText() + "')";
            //System.out.println("Updating Sdate with: " + SQL);
            Connection conny = DriverManager.getConnection(Myurl);
            Statement stater =  conny.createStatement();
            stater.executeUpdate(SQL);
        }catch (Exception e) {e.printStackTrace();}
    }//GEN-LAST:event_RcvSdateBtnActionPerformed

    private void RcvLocBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RcvLocBtnActionPerformed
        // Update the ship location
        try{//Tested
            //System.out.println("Updating Ship Location");
            String SQL = "UPDATE [HDD_Records].[dbo].[Recieving] SET LID = (SELECT LID FROM [HDD_Records].[dbo].[Addresses] WHERE LocName LIKE '" + RcvLocCmbBx.getSelectedItem().toString() + "') WHERE OID LIKE (SELECT OID FROM [HDD_Records].[dbo].[Orders] WHERE InOrdNum LIKE '" + RcvOrdrTxt.getText() + "')";
            //System.out.println("Updating Fcost with: " + SQL);
            Connection conny = DriverManager.getConnection(Myurl);
            Statement stater =  conny.createStatement();
            stater.executeUpdate(SQL);
        }catch (Exception e) {e.printStackTrace();}
    }//GEN-LAST:event_RcvLocBtnActionPerformed

    private void RcvGrossBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RcvGrossBtnActionPerformed
        // Update Gross
        try{
            System.out.println("Updating Gross Weight");
            String SQL = "UPDATE [HDD_Records].[dbo].[Recieving] SET Gross = '" + RcvGrossTxt.getText() + "' WHERE OID LIKE (SELECT OID FROM [HDD_Records].[dbo].[Orders] WHERE InOrdNum LIKE '" + RcvOrdrTxt.getText() + "')";
            System.out.println("Updating Gross with: " + SQL);
            Connection conny = DriverManager.getConnection(Myurl);
            Statement stater =  conny.createStatement();
            stater.executeUpdate(SQL);
        }catch (Exception e) {e.printStackTrace();}
    }//GEN-LAST:event_RcvGrossBtnActionPerformed

    private void RcvSnotesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RcvSnotesBtnActionPerformed
        //Update Snotes or create table entry if one does not exist
        try{//TESTED
            System.out.println("Updating Snotes");
            //needs to be update or insert if not in.
            String SQL = "IF EXISTS(SELECT OID FROM [HDD_Records].[dbo].[Notes] "
            + "WHERE OID = (SELECT OID FROM [HDD_Records].[dbo].[Orders] WHERE InOrdNum LIKE '" + RcvOrdrTxt.getText() + "')) "
            + "UPDATE [HDD_Records].[dbo].[Notes] SET Snotes ='"+ RcvSnotesTxtA.getText() +"' "
            + "WHERE OID = (SELECT OID FROM [HDD_Records].[dbo].[Orders] WHERE InOrdNum LIKE '"+RcvOrdrTxt.getText()+"') "
            + "ELSE INSERT INTO [HDD_Records].[dbo].[Notes](OID,Snotes) VALUES((SELECT OID FROM [HDD_Records].[dbo].[Orders] "
            + "WHERE InOrdNum LIKE '"+RcvOrdrTxt.getText()+"'),'"+RcvSnotesTxtA.getText()+"');";
            System.out.println("Updating Snotes with: " + SQL);
            Connection conny = DriverManager.getConnection(Myurl);
            Statement stater =  conny.createStatement();
            stater.executeUpdate(SQL);
        }catch (Exception e) {e.printStackTrace();}
    }//GEN-LAST:event_RcvSnotesBtnActionPerformed

    private void RcvFPdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RcvFPdateBtnActionPerformed
        //Update/Change FPdate
        try{//Tested
            //System.out.println("Updating FPdate");
            Date mynowDate = RcvFPdatePc.getDate();
            DateFormat oDateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String szDate = oDateFormat.format(mynowDate);
            String SQL = "UPDATE [HDD_Records].[dbo].[Recieving] SET FPdate = '" + szDate + "' WHERE OID LIKE (SELECT OID FROM [HDD_Records].[dbo].[Orders] WHERE InOrdNum LIKE '" + RcvOrdrTxt.getText() + "')";
            //System.out.println("Updating FPdate with: " + SQL);
            Connection conny = DriverManager.getConnection(Myurl);
            Statement stater =  conny.createStatement();
            stater.executeUpdate(SQL);
        }catch (Exception e) {e.printStackTrace();}
    }//GEN-LAST:event_RcvFPdateBtnActionPerformed

    private void RcvFcostBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RcvFcostBtnActionPerformed
        // UPDATE FCost Button
        try{//TESTED
            //System.out.println("Updating FCost");
            String SQL = "UPDATE [HDD_Records].[dbo].[Recieving] SET Fcost = '" + RcvFcostTxt.getText() + "' WHERE OID LIKE (SELECT OID FROM [HDD_Records].[dbo].[Orders] WHERE InOrdNum LIKE '" + RcvOrdrTxt.getText() + "')";
            //System.out.println("Updating Fcost with: " + SQL);
            Connection conny = DriverManager.getConnection(Myurl);
            Statement stater =  conny.createStatement();
            stater.executeUpdate(SQL);
        }catch (Exception e) {e.printStackTrace();}
    }//GEN-LAST:event_RcvFcostBtnActionPerformed

    private void RcvFcostTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RcvFcostTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RcvFcostTxtActionPerformed

    private void RcvRdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RcvRdateBtnActionPerformed
        // SQL update Rdate from RcvRdatePc
        try{//TESTED
            //System.out.println("Updating Rdate");
            Date mynowDate = RcvRdatePc.getDate();
            DateFormat oDateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String szDate = oDateFormat.format(mynowDate);
            String SQL = "UPDATE [HDD_Records].[dbo].[Recieving] SET Rdate = '" + szDate + "' WHERE OID LIKE (SELECT OID FROM [HDD_Records].[dbo].[Orders] WHERE InOrdNum LIKE '" + RcvOrdrTxt.getText() + "')";
            //System.out.println("Updating Rdate with: " + SQL);
            Connection conny = DriverManager.getConnection(Myurl);
            Statement stater =  conny.createStatement();
            stater.executeUpdate(SQL);
        }catch (Exception e) {e.printStackTrace();}
    }//GEN-LAST:event_RcvRdateBtnActionPerformed

    private void RcvOrdrBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RcvOrdrBtnActionPerformed
        // TODO add your handling code here:
        String OrderNum = RcvOrdrTxt.getText();
        SetRecieveEmpty();
        //IF BLANK DISABLE EVERYTHING ON THE TAB
        if (OrderNum.equals("")){
            SetRecieveEmpty();
        }else {
            //lookup order, if order entered populate tab per user level if not ask if you would like to create order
            try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                System.out.println("looking for order!");
                conn = DriverManager.getConnection(Myurl);
                String SQL = "Select O.OID, O.InOrdNum,R.Sdate, R.DNum, V.Vendor, R.Rdate, R.Fcost, R.FPdate, V.Vname, A.LocName, N.Snotes, R.Gross, R.Adate from [HDD_Records].[dbo].[Orders] AS O\n" +
                "LEFT JOIN [HDD_Records].[dbo].[Vendors] AS V ON V.VID = O.VID\n" +
                "LEFT JOIN [HDD_Records].[dbo].[Recieving] AS R ON O.OID = R.OID\n" +
                "LEFT JOIN [HDD_Records].[dbo].[Addresses] AS A ON A.LID = R.LID\n" +
                "LEFT JOIN [HDD_Records].[dbo].[Notes] AS N ON N.OID = O.OID\n" +
                "WHERE O.InOrdNum LIKE '"+ OrderNum +"'";
                //System.out.println(SQL);
                stmt = conn.createStatement();
                rs = stmt.executeQuery(SQL);
                try {
                    if (rs.next()) {
                        //If order found do as follows
                        RcvVendorTxt.setText(rs.getString("Vendor"));
                        RcvRdatePc.setDate(rs.getDate("Rdate"));//enable if user of privilage
                        RcvFcostTxt.setText(rs.getString("Fcost"));
                        RcvFPdatePc.setDate(rs.getDate("FPdate"));
                        //clear locations
                        RcvLocCmbBx.removeAll();
                        //get all locations and load all locations
                        RcvLocCmbBx.setModel(new DefaultComboBoxModel(getLox4vendor(rs.getString("Vendor")).toArray()));
                        //set current location
                        RcvLocCmbBx.setSelectedItem(rs.getString("LocName"));
                        RcvSdatePc.setDate(rs.getDate("Sdate"));
                        RcvDnumTxt.setText(rs.getString("DNum"));
                        RcvSnotesTxtA.setText(rs.getString("Snotes"));
                        RcvGrossTxt.setText(rs.getString("Gross"));
                        RcvAdatePc.setDate(rs.getDate("Adate"));

                        //switch for setting user access
                        switch (userAccess[0]){
                            case 0://no access
                            //System.out.println("all nope");
                            ReceiveTb.setVisible(false);
                            break;
                            case 1://view only
                            //System.out.println("visual only");
                            break;
                            case 2://limited access
                            //System.out.println("kinda nope");
                            break;
                            case 3://full access
                            //System.out.println("all yes");
                            SetRecieveFull();
                            break;
                            default://unknow clear it and burn the evidence
                            System.out.println("very nope");
                            SetRecieveEmpty();
                            break;
                        }
                    }else {
                        CreateOrdNumTxt.setText(OrderNum);
                        CreateVendCmbBx.removeAllItems();
                        CreateVendCmbBx.addItem("");
                        CreateVendCmbBx.setModel(new DefaultComboBoxModel(getAllVendorNums().toArray()));
                        CreateOrderDialog.setVisible((true));
                    }
                } catch (Exception e) {e.printStackTrace();}
            } catch (Exception e){e.printStackTrace();}
        }
    }//GEN-LAST:event_RcvOrdrBtnActionPerformed

    private void RcvOrdrTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RcvOrdrTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RcvOrdrTxtActionPerformed
   
    //***************Recieving Tab******************************************TAB0
    private void SetRecieveEmpty(){/*This is for clearing data on the Recieving tab*/
        TabPanel.setEnabledAt(0,true);
        RcvOrdrTxt.setText("");
        RcvOrdrTxt.requestFocus();
        RcvLocCmbBx.removeAllItems();
        RcvLocCmbBx.setEnabled(false);
        RcvRdateBtn.setEnabled(false);
        RcvFcostBtn.setEnabled(false);
        RcvFPdateBtn.setEnabled(false);
        RcvFPdatePc.setEnabled(false);
        RcvLocBtn.setEnabled(false);
        RcvSdateBtn.setEnabled(false);
        RcvDnumBtn.setEnabled(false);
        RcvSnotesBtn.setEnabled(false);
        RcvGrossBtn.setEnabled(false);
        RcvAdateBtn.setEnabled(false);
        RcvVendorTxt.setEnabled(false);
        RcvVendorTxt.setText("");
        RcvRdatePc.setEnabled(false);
        RcvRdatePc.setDate(null);
        RcvFcostTxt.setEnabled(false);
        RcvFcostTxt.setText("");
        RcvSdatePc.setEnabled(false);
        RcvSdatePc.setDate(null);
        RcvDnumTxt.setEnabled(false);
        RcvDnumTxt.setText("");
        RcvAdatePc.setEnabled(false);
        RcvAdatePc.setDate(null);
        RcvGrossTxt.setEnabled(false);
        RcvGrossTxt.setText("");
        RcvSnotesTxtA.setText("");
        RcvSnotesTxtA.setEnabled(false);
    }
    
    private void SetRecieveLimited(){
        SetRecieveEmpty();
    }
    
    private void SetRecieveFull(){/*This is for setting full access on the Recieving tab*/
        TabPanel.setEnabledAt(0,true);
        RcvOrdrTxt.requestFocus();
        RcvLocCmbBx.setEnabled(true);
        RcvRdateBtn.setEnabled(true);
        RcvFcostBtn.setEnabled(true);
        RcvFPdateBtn.setEnabled(true);
        RcvFPdatePc.setEnabled(true);
        RcvLocBtn.setEnabled(true);
        RcvSdateBtn.setEnabled(true);
        RcvDnumBtn.setEnabled(true);
        RcvSnotesBtn.setEnabled(true);
        RcvGrossBtn.setEnabled(true);
        RcvAdateBtn.setEnabled(true);
        RcvVendorTxt.setEnabled(true);
        RcvRdatePc.setEnabled(true);
        RcvFcostTxt.setEnabled(true);
        RcvSdatePc.setEnabled(true);
        RcvDnumTxt.setEnabled(true);
        RcvAdatePc.setEnabled(true);
        RcvGrossTxt.setEnabled(true);
        RcvSnotesTxtA.setEnabled(true);
    }
    //****************Heat Assignment***************************************TAB1
    private void SetHeatEmpty(){
        //stub to clear and set empty HeatAssignment Tab
        refreshHeatsTbl();
        HeatOrdersTbl.setEnabled(false);
    }
    
    private void SetHeatLimited(){
        //stub to clear and set limited access HeatAssignment Tab
        HeatOrdersTbl.setEnabled(false);
    }
    
    private void SetHeatFull(){
        //stub to clear and set full access HeatAssignment Tab
        HeatOrdersTbl.setEnabled(true);
    }
    //**************Production Manager**************************************TAB2
    private void SetProductionManagerEmpty(){
        //stub to clear and set empty ProductionManager Tab
        PMOrderTxt.setText(""); PMOrderTxt.setEnabled(true); PMOrderBtn.setEnabled(true);
        PMVendorTxt.setText(""); PMVendorTxt.setEnabled(false);
        PMRdatePc.setDate(null); PMRdatePc.setEnabled(false);
        PMGrossTxt.setText(""); PMGrossTxt.setEnabled(false);
        PMSnotesTxtA.setText(""); PMSnotesTxtA.setEnabled(false);
        PMSheatTxt.setText(""); PMSheatTxt.setEnabled(false); PMSheatBtn.setEnabled(false);
        PMSCompPc.setDate(null); PMSCompPc.setEnabled(false); PMSCompBtn.setEnabled(false);
        PMBScanTxt.setText(""); PMBScanTxt.setEnabled(false); PMBScanBtn.setEnabled(false);
        PMScanCompPc.setDate(null); PMScanCompPc.setEnabled(false); PMScanCompBtn.setEnabled(false);
        PMPheatTxt.setText(""); PMPheatTxt.setEnabled(false); PMPheatBtn.setEnabled(false);
        PMDmanPc.setDate(null); PMDmanPc.setEnabled(false); PMDmanBtn.setEnabled(false);
        PMSentTxt.setText(""); PMSentTxt.setEnabled(false); PMSentBtn.setEnabled(false);
        PMSentDtPc.setDate(null); PMSentDtPc.setEnabled(false); PMSentDtBtn.setEnabled(false);
        PMHDRecieveTxt.setText(""); PMHDRecieveTxt.setEnabled(false);
        PMHDScanTxt.setText(""); PMHDScanTxt.setEnabled(false);
        PMOnotesTxtA.setText(""); PMOnotesTxtA.setEnabled(false); PMOnotesBtn.setEnabled(false);
    }
    
    private void SetProductionManagerLimited(){
        //stub to clear and set limited access ProductionManager Tab
        SetProductionManagerEmpty();
    }
    
    private void SetProductionManagerFull(){
        //stub to clear and set full access ProductionManager Tab
        PMOrderTxt.setEnabled(true); PMOrderBtn.setEnabled(true);
        PMVendorTxt.setEnabled(true);
        PMRdatePc.setEnabled(true);
        PMGrossTxt.setEnabled(true);
        PMSnotesTxtA.setEnabled(true);
        PMSheatTxt.setEnabled(true); PMSheatBtn.setEnabled(true);
        PMSCompPc.setEnabled(true); PMSCompBtn.setEnabled(true);
        PMBScanTxt.setEnabled(true); PMBScanBtn.setEnabled(true);
        PMScanCompPc.setEnabled(true); PMScanCompBtn.setEnabled(true);
        PMPheatTxt.setEnabled(true); PMPheatBtn.setEnabled(true);
        PMDmanPc.setEnabled(true); PMDmanBtn.setEnabled(true);
        PMSentTxt.setEnabled(true); PMSentBtn.setEnabled(true);
        PMSentDtPc.setEnabled(true); PMSentDtBtn.setEnabled(true);
        PMHDRecieveTxt.setEnabled(true);
        PMHDScanTxt.setEnabled(true);
        PMOnotesTxtA.setEnabled(true); PMOnotesBtn.setEnabled(true);
    }
    //**************HDD Manager*********************************************TAB3
    private void SetHDDManagerEmpty(){
        //stub to clear and set empty HDDManager Tab
    }
    
    private void SetHDDManagerLimited(){
        //stub to clear and set limited access HDDManager Tab
    }
    
    private void SetHDDManagerFull(){
        //stub to clear and set full access HDDManager Tab
    }
    //**************Record View*********************************************TAB4
    private void SetRecordViewEmpty(){
        //stub to clear and set empty Record View Tab
    }
    
    private void SetRecordViewLimited(){
        //stub to clear and set limited access Record View Tab
    }
    
    private void SetRecordViewFull(){
        //stub to clear and set full access Record View Tab
    }
    //**************Admin Tab***********************************************TAB5
    private void SetAdminEmpty(){
        //stub to clear and set empty Admin Tab
    }
    
    private void SetAdminLimited(){
        //stub to clear and set limited access Admin Tab
    }
    
    private void SetAdminFull(){
        //stub to clear and set full access Admin Tab
    }
    //**************Wipe Tab************************************************TAB6
    private void SetWipeEmpty(){
        //stub to clear and set empty Wipe Report Tab
    }
    
    private void SetWipeLimited(){
        //stub to clear and set limited access Wipe Report Tab
    }
    
    private void SetWipeFull(){
        //stub to clear and set full access Wipe Report Tab
    }
    //**************Resale Tab**********************************************TAB7
    private void SetResaleEmpty(){
        //stub to clear and set empty Resale Tab
    }
    
    private void SetResaleLimited(){
        //stub to clear and set limited access Resale Tab
    }
    
    private void SetResaleFull(){
        //stub to clear and set full access Resale Tab
    }
    //**************OpsDash Tab*********************************************TAB8
    private void SetOpsDashEmpty(){
        //stub to clear and set empty Ops Dashboard Tab
    }
    
    private void SetOpsDashLimited(){
        //stub to clear and set limited access Ops Dashboard Tab
    }
    
    private void SetOpsDashFull(){
        //stub to clear and set full access Ops Dashboard Tab
    }
    
    //##########################################################################
    //  PUBLIC UTILITY FUNCTIONS################################################
    //##########################################################################
    
    //fix this so you can give an order number and return an array of location names.
    public ArrayList<String> getLox4vendor(String x){
        ArrayList<String> vendorString = new ArrayList();
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            //System.out.println("looking up Addresses!");
            Connection myConn = DriverManager.getConnection(Myurl);
            String SQL = "Select A.[LocName] FROM [HDD_Records].[dbo].[Addresses] AS A\n"
                    + "LEFT JOIN [HDD_Records].[dbo].[Vendors] AS V ON A.VID = V.VID\n"
                    + "WHERE V.Vendor LIKE '" + x + "'" ;
            //System.out.println(SQL);
            Statement wordYo = myConn.createStatement();
            ResultSet ms = wordYo.executeQuery(SQL);
            try {
                while (ms.next()) {
                    vendorString.add(ms.getString("LocName"));
                }
            }catch(Exception e){e.printStackTrace();}
        }catch (Exception e){e.printStackTrace();}
        return vendorString;
    }
    
    public ArrayList<String> getAllVendorNums(){
        ArrayList<String> vendorString = new ArrayList();
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            //System.out.println("looking up Addresses!");
            Connection myConn = DriverManager.getConnection(Myurl);
            String SQL = "SELECT Vendor FROM [HDD_Records].[dbo].[Vendors]" ;
            //System.out.println(SQL);
            Statement wordYo = myConn.createStatement();
            ResultSet ms = wordYo.executeQuery(SQL);
            try {
                while (ms.next()) {
                    vendorString.add(ms.getString("Vendor"));
                 }
            }catch(Exception e){e.printStackTrace();}
        }catch (Exception e){e.printStackTrace();}
        return vendorString;
    }
    
    public void refreshHeatsTbl () {
        //this refreshes or loads the table on the heat assignment tab
                try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                System.out.println("Loading open orders into Heat Table!");
                conn = DriverManager.getConnection(Myurl);
                String SQL = "SELECT O.OID,O.InOrdNum,R.Adate,P.Ddate,S.Sheat,P.Pheat FROM [HDD_Records].[dbo].[Recieving] AS R "+
                    "FULL JOIN  [HDD_Records].[dbo].[Orders] AS O ON R.OID = O.OID "+
                    "LEFT JOIN [HDD_Records].[dbo].[Production] AS P ON R.OID = P.OID "+
                    "LEFT JOIN [HDD_Records].[dbo].[SortScan] AS S ON R.OID = S.OID "+
                    "WHERE R.OID IN (SELECT R.OID FROM [dbo].Recieving  "+
                    "WHERE R.Adate IS NOT NULL) AND P.OID NOT IN (SELECT P.OID FROM [dbo].[Production]  "+
                    "WHERE P.Ddate IS NOT NULL)";//create sql statment to pull all the orders recieved without being completed.
                System.out.println(SQL);
                stmt = conn.createStatement();
                rs = stmt.executeQuery(SQL);
                //clear the jTable before we start
                DefaultTableModel model = (DefaultTableModel)HeatOrdersTbl.getModel();
                model.setRowCount(0);
                while (rs.next()){
                    //fill table with result
                    Object RowData[] = {rs.getString("OID"),rs.getString("InOrdNum"),rs.getString("Sheat"),rs.getString("Pheat")};
                    model.addRow(RowData);
                }
                HeatOrdersTbl.setModel(model);
                HeatSortTxt.setText("");
                HeatSortTxt.setEnabled(false);
                HeatSortBtn.setEnabled(false);
                HeatProdTxt.setText("");
                HeatProdTxt.setEnabled(false);
                HeatProdBtn.setEnabled(false);
                HeatOrdLbl.setText("Order");
                //HeatOrdersTbl.setEnabled(true);
        } catch (Exception e){e.printStackTrace();}
    }
    
    public void updateOrInsertString(JTextField mTxt, String myTable, String myVar, String myOrder){
            try{
                System.out.println("Updating Box "+ myTable);
                //needs to be update or insert if not in.
                String SQL = "IF EXISTS(SELECT OID FROM [HDD_Records].[dbo].["+ myTable +"] "
                        + "WHERE OID LIKE (SELECT OID FROM [HDD_Records].[dbo].[Orders] "
                        + "WHERE InOrdNum LIKE '" + myOrder + "')) "
                        + "UPDATE [HDD_Records].[dbo].["+ myTable +"] SET "+ myVar + " ='"+ mTxt.getText() +"' "
                        + "WHERE OID LIKE (SELECT OID FROM [HDD_Records].[dbo].[Orders] "
                        + "WHERE InOrdNum LIKE '" + myOrder + "') "
                        + "ELSE INSERT INTO [HDD_Records].[dbo].["+ myTable +"](OID,"+ myVar + ") VALUES((SELECT OID FROM [HDD_Records].[dbo].[Orders] "
                        + "WHERE InOrdNum LIKE '" + myOrder + "'),'"+ mTxt.getText()+"')";
                System.out.println("Updating "+ myTable +" with: " + SQL);
                Connection conny = DriverManager.getConnection(Myurl);
                Statement stater =  conny.createStatement();
                stater.executeUpdate(SQL);
            }catch (Exception e) {e.printStackTrace();}                                         
    }
    
    public void updateOrInsertString(JTextArea mTxt, String myTable, String myVar, String myOrder){
            try{
                System.out.println("Updating Box "+ myTable);
                //needs to be update or insert if not in.
                String SQL = "IF EXISTS(SELECT OID FROM [HDD_Records].[dbo].["+ myTable +"] "
                        + "WHERE OID LIKE (SELECT OID FROM [HDD_Records].[dbo].[Orders] "
                        + "WHERE InOrdNum LIKE '" + myOrder + "')) "
                        + "UPDATE [HDD_Records].[dbo].["+ myTable +"] SET "+ myVar + " ='"+ mTxt.getText() +"' "
                        + "WHERE OID LIKE (SELECT OID FROM [HDD_Records].[dbo].[Orders] "
                        + "WHERE InOrdNum LIKE '" + myOrder + "') "
                        + "ELSE INSERT INTO [HDD_Records].[dbo].["+ myTable +"](OID,"+ myVar + ") VALUES((SELECT OID FROM [HDD_Records].[dbo].[Orders] "
                        + "WHERE InOrdNum LIKE '" + myOrder + "'),'"+ mTxt.getText()+"')";
                System.out.println("Updating "+ myTable +" with: " + SQL);
                Connection conny = DriverManager.getConnection(Myurl);
                Statement stater =  conny.createStatement();
                stater.executeUpdate(SQL);
            }catch (Exception e) {e.printStackTrace();}                                         
    }
    
    public void updateInsertDate(JXDatePicker myDate, String myTable, String myVar, String thisOrd){
            try{
                System.out.println("Updating " + myTable);
                Date mynowDate = myDate.getDate();
                DateFormat oDateFormat = new SimpleDateFormat("yyyy-MM-dd");
                String szDate = oDateFormat.format(mynowDate);
                //needs to be update or insert if not in.
                String SQL = "IF EXISTS(SELECT OID FROM [HDD_Records].[dbo].[" + myTable +"] "
                        + "WHERE OID LIKE (SELECT OID FROM [HDD_Records].[dbo].[Orders] "
                        + "WHERE InOrdNum LIKE '" + thisOrd + "')) "
                        + "UPDATE [HDD_Records].[dbo].[" + myTable +"] SET " + myVar +" ='"+ szDate +"' "
                        + "WHERE OID LIKE (SELECT OID FROM [HDD_Records].[dbo].[Orders] "
                        + "WHERE InOrdNum LIKE '" + thisOrd + "') "
                        + "ELSE INSERT INTO [HDD_Records].[dbo].[" + myTable +"](OID," + myVar +") VALUES((SELECT OID FROM [HDD_Records].[dbo].[Orders] "
                        + "WHERE InOrdNum LIKE '" + thisOrd + "'),'" + szDate + "')";
                System.out.println("Updating Box Scan Comp Date with: " + SQL);
                Connection conny = DriverManager.getConnection(Myurl);
                Statement stater =  conny.createStatement();
                stater.executeUpdate(SQL);
            }catch (Exception e) {e.printStackTrace();}
    }
    
    /***************************************************************************
     *              MAIN
     * 
     * @param args the command line arguments
     **************************************************************************/
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HDDMainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HDDMainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HDDMainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HDDMainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HDDMainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel About;
    private javax.swing.JPanel AdminTb;
    private javax.swing.JButton CreateCancel;
    private javax.swing.JButton CreateNewBtn;
    private javax.swing.JLabel CreateOrdNumLbl;
    private javax.swing.JTextField CreateOrdNumTxt;
    private javax.swing.JDialog CreateOrderDialog;
    private javax.swing.JLabel CreateOrderNotExistLbl;
    private javax.swing.JLabel CreateRdateLbl;
    private org.jdesktop.swingx.JXDatePicker CreateRdatePc;
    private javax.swing.JComboBox<String> CreateShipLocCmbBx;
    private javax.swing.JLabel CreateShipLocLbl;
    private javax.swing.JComboBox<String> CreateVendCmbBx;
    private javax.swing.JLabel CreateVendorNumLbl;
    private javax.swing.JLabel DashboardLbl;
    private javax.swing.JLabel DashboardLbl1;
    private javax.swing.JButton ExitBtn;
    private javax.swing.JLabel HDDManBSCLbl;
    private javax.swing.JTextField HDDManBSCTxt;
    private javax.swing.JLabel HDDManBSCompLbl;
    private org.jdesktop.swingx.JXDatePicker HDDManBSCompPc;
    private javax.swing.JLabel HDDManCompDLbl;
    private org.jdesktop.swingx.JXDatePicker HDDManCompDPc;
    private javax.swing.JLabel HDDManDmanCLbl;
    private org.jdesktop.swingx.JXDatePicker HDDManDmanCPc;
    private javax.swing.JPanel HDDManLanesPnl;
    private javax.swing.JButton HDDManOnotesBtn;
    private javax.swing.JLabel HDDManOnotesLbl;
    private javax.swing.JTextArea HDDManOnotesTxtA;
    private javax.swing.JButton HDDManOrderBtn;
    private javax.swing.JLabel HDDManOrderLbl;
    private javax.swing.JTextField HDDManOrderTxt;
    private javax.swing.JButton HDDManRAddBtn;
    private javax.swing.JTextField HDDManRAlterTxt;
    private javax.swing.JButton HDDManRSubBtn;
    private javax.swing.JLabel HDDManRdateLbl;
    private org.jdesktop.swingx.JXDatePicker HDDManRdatePc;
    private javax.swing.JButton HDDManRecieveCompBtn;
    private javax.swing.JLabel HDDManRecieveCompLbl;
    private org.jdesktop.swingx.JXDatePicker HDDManRecieveCompPc;
    private javax.swing.JLabel HDDManRecieveLbl;
    private javax.swing.JTextField HDDManRecieveTxt;
    private javax.swing.JButton HDDManRecieveUDBtn;
    private javax.swing.JLabel HDDManSODLbl;
    private javax.swing.JTextField HDDManSODTxt;
    private javax.swing.JLabel HDDManSOFLbl;
    private javax.swing.JTextField HDDManSOFTxt;
    private javax.swing.JLabel HDDManSOPLbl;
    private javax.swing.JTextField HDDManSOPTxt;
    private javax.swing.JLabel HDDManSentCLbl;
    private javax.swing.JTextField HDDManSentCTxt;
    private javax.swing.JLabel HDDManSerialCLbl;
    private javax.swing.JTextField HDDManSerialCTxt;
    private javax.swing.JButton HDDManSerialCompBtn;
    private javax.swing.JLabel HDDManSerialCompLbl;
    private org.jdesktop.swingx.JXDatePicker HDDManSerialCompPc;
    private javax.swing.JTable HDDManSizeTbl;
    private javax.swing.JScrollPane HDDManTblPnl;
    private javax.swing.JLabel HDDManVendLbl;
    private javax.swing.JTextField HDDManVendTxt;
    private javax.swing.JPanel HDDManager;
    private javax.swing.JPanel HeatAssignment;
    private javax.swing.JLabel HeatOrdLbl;
    private javax.swing.JScrollPane HeatOrderScroll;
    private javax.swing.JTable HeatOrdersTbl;
    private javax.swing.JButton HeatProdBtn;
    private javax.swing.JTextField HeatProdTxt;
    private javax.swing.JButton HeatSortBtn;
    private javax.swing.JTextField HeatSortTxt;
    private javax.swing.JDialog LogInDialog;
    private javax.swing.JButton LogInOutBtn;
    private javax.swing.JButton LoginCancelBtn;
    private javax.swing.JButton LoginOKBtn;
    private javax.swing.JPasswordField LoginPswrdTxt;
    private javax.swing.JTextField LoginUserTxt;
    private javax.swing.JPanel OpsDashTb;
    private javax.swing.JButton PMBSAddBtn;
    private javax.swing.JTextField PMBSAlterTxt;
    private javax.swing.JButton PMBSSubBtn;
    private javax.swing.JButton PMBScanBtn;
    private javax.swing.JLabel PMBScanLbl;
    private javax.swing.JTextField PMBScanTxt;
    private javax.swing.JButton PMDmanBtn;
    private javax.swing.JLabel PMDmanLbl;
    private org.jdesktop.swingx.JXDatePicker PMDmanPc;
    private javax.swing.JLabel PMGrossLbl;
    private javax.swing.JTextField PMGrossTxt;
    private javax.swing.JLabel PMHDRecieveLbl;
    private javax.swing.JTextField PMHDRecieveTxt;
    private javax.swing.JLabel PMHDScanLbl;
    private javax.swing.JTextField PMHDScanTxt;
    private javax.swing.JButton PMOnotesBtn;
    private javax.swing.JLabel PMOnotesLbl;
    private javax.swing.JTextArea PMOnotesTxtA;
    private javax.swing.JButton PMOrderBtn;
    private javax.swing.JLabel PMOrderLbl;
    private javax.swing.JTextField PMOrderTxt;
    private javax.swing.JButton PMPheatBtn;
    private javax.swing.JLabel PMPheatLbl;
    private javax.swing.JTextField PMPheatTxt;
    private javax.swing.JLabel PMRdateLbl;
    private org.jdesktop.swingx.JXDatePicker PMRdatePc;
    private javax.swing.JButton PMSCompBtn;
    private javax.swing.JLabel PMSCompLbl;
    private org.jdesktop.swingx.JXDatePicker PMSCompPc;
    private javax.swing.JButton PMScanCompBtn;
    private javax.swing.JLabel PMScanCompLbl;
    private org.jdesktop.swingx.JXDatePicker PMScanCompPc;
    private javax.swing.JButton PMSentAddBtn;
    private javax.swing.JTextField PMSentAlterTxt;
    private javax.swing.JButton PMSentBtn;
    private javax.swing.JButton PMSentDtBtn;
    private javax.swing.JLabel PMSentDtLbl;
    private org.jdesktop.swingx.JXDatePicker PMSentDtPc;
    private javax.swing.JLabel PMSentLbl;
    private javax.swing.JButton PMSentSubBtn;
    private javax.swing.JTextField PMSentTxt;
    private javax.swing.JButton PMSheatBtn;
    private javax.swing.JLabel PMSheatLbl;
    private javax.swing.JTextField PMSheatTxt;
    private javax.swing.JLabel PMSnotesLbl;
    private javax.swing.JTextArea PMSnotesTxtA;
    private javax.swing.JLabel PMTabLbl;
    private javax.swing.JLabel PMVendorLbl;
    private javax.swing.JTextField PMVendorTxt;
    private javax.swing.JPanel ProductionManager;
    private javax.swing.JButton RcvAdateBtn;
    private javax.swing.JLabel RcvAdateLbl;
    private org.jdesktop.swingx.JXDatePicker RcvAdatePc;
    private javax.swing.JButton RcvDnumBtn;
    private javax.swing.JLabel RcvDnumLbl;
    private javax.swing.JTextField RcvDnumTxt;
    private javax.swing.JButton RcvFPdateBtn;
    private javax.swing.JLabel RcvFPdateLBL;
    private org.jdesktop.swingx.JXDatePicker RcvFPdatePc;
    private javax.swing.JButton RcvFcostBtn;
    private javax.swing.JLabel RcvFcostLbl;
    private javax.swing.JTextField RcvFcostTxt;
    private javax.swing.JButton RcvGrossBtn;
    private javax.swing.JLabel RcvGrossLbl;
    private javax.swing.JTextField RcvGrossTxt;
    private javax.swing.JButton RcvLocBtn;
    private javax.swing.JComboBox<String> RcvLocCmbBx;
    private javax.swing.JLabel RcvLocLbl;
    private javax.swing.JButton RcvOrdrBtn;
    private javax.swing.JLabel RcvOrdrLbl;
    private javax.swing.JTextField RcvOrdrTxt;
    private javax.swing.JButton RcvRdateBtn;
    private javax.swing.JLabel RcvRdateLbl;
    private org.jdesktop.swingx.JXDatePicker RcvRdatePc;
    private javax.swing.JButton RcvSdateBtn;
    private javax.swing.JLabel RcvSdateLbl;
    private org.jdesktop.swingx.JXDatePicker RcvSdatePc;
    private javax.swing.JButton RcvSnotesBtn;
    private javax.swing.JLabel RcvSnotesLbl;
    private javax.swing.JScrollPane RcvSnotesScroll;
    private javax.swing.JTextArea RcvSnotesTxtA;
    private javax.swing.JLabel RcvTabTitleLbl;
    private javax.swing.JLabel RcvVendorLbl;
    private javax.swing.JTextField RcvVendorTxt;
    private javax.swing.JPanel ReceiveTb;
    private javax.swing.JPanel RecordView;
    private javax.swing.JLabel ResaleLbl;
    private javax.swing.JPanel ResaleTb;
    private javax.swing.JTabbedPane TabPanel;
    private javax.swing.JToolBar ToolBar;
    private javax.swing.JLabel UserLbl;
    private javax.swing.JPanel WipeReports;
    private javax.swing.JLabel WipeReportsLbl;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton26;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTable jTable6;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField30;
    private javax.swing.JTextField jTextField34;
    private javax.swing.JTextField jTextField35;
    private javax.swing.JTextField jTextField36;
    private javax.swing.JTextField jTextField37;
    private javax.swing.JTextField jTextField38;
    private javax.swing.JTextField jTextField39;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToolBar jToolBar1;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker14;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker8;
    // End of variables declaration//GEN-END:variables
}
